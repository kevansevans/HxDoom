<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="C:\HaxeToolkit\haxe\std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="Map" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="257" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="261" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="265" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="C:\HaxeToolkit\haxe\std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringTools" params="" file="C:\HaxeToolkit\haxe\std/StringTools.hx">
		<hex public="1" set="method" line="435" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Sys" params="" file="C:\HaxeToolkit\haxe\std/Sys.hx" extern="1">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.

		(cs) Non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns all environment variables.</haxe_doc>
		</environment>
		<sleep public="1" set="method" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<command public="1" set="method" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":require"><e>sys</e></m>
		</meta>
	</class>
	<class path="Type" params="" file="C:\HaxeToolkit\haxe\std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<abstract path="haxe.CallStack" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="C:\HaxeToolkit\haxe\std/haxe/Exception.hx" extern="1">
		<caught set="method" static="1">
			<f a="value">
				<x path="Any"/>
				<c path="haxe.Exception"/>
			</f>
			<haxe_doc>Used internally for wildcard catches like `catch(e:Exception)`.</haxe_doc>
		</caught>
		<thrown set="method" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<haxe_doc>Used internally for wrapping non-throwable values for `throw` expressions.</haxe_doc>
		</thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<get_message set="method"><f a=""><c path="String"/></f></get_message>
		<stack public="1" get="accessor" set="null">
			<x path="haxe.CallStack"/>
			<haxe_doc>The call stack at the moment of the exception creation.</haxe_doc>
		</stack>
		<get_stack set="method"><f a=""><x path="haxe.CallStack"/></f></get_stack>
		<previous public="1" get="accessor" set="null">
			<x path="Null"><c path="haxe.Exception"/></x>
			<haxe_doc>Contains an exception, which was passed to `previous` constructor argument.</haxe_doc>
		</previous>
		<get_previous set="method"><f a=""><x path="Null"><c path="haxe.Exception"/></x></f></get_previous>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<get_native final="1" set="method"><f a=""><x path="Any"/></f></get_native>
		<unwrap set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<details public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Detailed exception description.

		Includes message, stack and the chain of previous exceptions (if set).</haxe_doc>
		</details>
		<new public="1" set="method">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Log" params="" file="C:\HaxeToolkit\haxe\std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="C:\HaxeToolkit\haxe\std/haxe/NativeStackTrace.hx" extern="1">
		<saveStack public="1" set="method" static="1"><f a="exception">
	<x path="Any"/>
	<x path="Void"/>
</f></saveStack>
		<callStack public="1" set="method" static="1"><f a=""><x path="Any"/></f></callStack>
		<exceptionStack public="1" set="method" static="1"><f a=""><x path="Any"/></f></exceptionStack>
		<toHaxe public="1" set="method" static="1">
			<f a="nativeStackTrace:?skip" v=":0">
				<x path="Any"/>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.crypto.Sha256" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Sha256.hx">
		<S get="inline" set="null" line="150"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch get="inline" set="null" line="158"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="162"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 get="inline" set="null" line="166"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 get="inline" set="null" line="170"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 get="inline" set="null" line="174"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 get="inline" set="null" line="178"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd get="inline" set="null" line="182"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<new set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="263"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/IntMap.hx" extern="1">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/StringMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Bytes.hx">
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<getString public="1" set="method" line="415">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesData.hx"><c path="Array"><x path="Int"/></c></typedef>
	<enum path="haxe.io.Encoding" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="haxe.io.Error" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.iterators.ArrayIterator" params="T" file="C:\HaxeToolkit\haxe\std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="51">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="hxdoom.Engine" params="" file="src/hxdoom/Engine.hx">
		<WADDATA public="1" get="accessor" set="null" static="1">
			<c path="hxdoom.core.WadCore"/>
			<haxe_doc>* Handles wad loading and parsing</haxe_doc>
		</WADDATA>
		<PROFILE public="1" get="accessor" set="null" static="1">
			<c path="hxdoom.core.ProfileCore"/>
			<haxe_doc>* Sets behavior based on the first IWAD provided</haxe_doc>
		</PROFILE>
		<RENDER public="1" get="accessor" set="null" static="1">
			<c path="hxdoom.core.RenderCore"/>
			<haxe_doc>* Handles render behavior</haxe_doc>
		</RENDER>
		<GAME public="1" get="accessor" set="null" static="1">
			<c path="hxdoom.core.GameCore"/>
			<haxe_doc>* Handles game behavior, not yet implemented</haxe_doc>
		</GAME>
		<IO public="1" get="accessor" set="null" static="1">
			<c path="hxdoom.core.IOCore"/>
			<haxe_doc>* Handles input and output behavior</haxe_doc>
		</IO>
		<SOUND public="1" get="accessor" set="null" static="1">
			<c path="hxdoom.core.SoundCore"/>
			<haxe_doc>* Handles sound processing</haxe_doc>
		</SOUND>
		<TEXTURES public="1" get="accessor" set="null" static="1">
			<c path="hxdoom.core.TextureCore"/>
			<haxe_doc>* Handles texture reading and building</haxe_doc>
		</TEXTURES>
		<LEVELS public="1" get="accessor" set="null" static="1">
			<c path="hxdoom.core.LevelCore"/>
			<haxe_doc>* Handles general map related behaviors</haxe_doc>
		</LEVELS>
		<LOADMAP public="1" static="1">
			<f a="">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Function to call when loading a map. Can be overriden to change behavior.</haxe_doc>
		</LOADMAP>
		<log public="1" get="inline" set="null" line="225" static="1">
			<f a="_msg:?_pos">
				<c path="String"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Placeholder for future engine logging
	 * @param	_msg</haxe_doc>
		</log>
		<get_WADDATA set="method" line="229" static="1"><f a=""><c path="hxdoom.core.WadCore"/></f></get_WADDATA>
		<get_RENDER set="method" line="234" static="1"><f a=""><c path="hxdoom.core.RenderCore"/></f></get_RENDER>
		<get_GAME set="method" line="239" static="1"><f a=""><c path="hxdoom.core.GameCore"/></f></get_GAME>
		<get_IO set="method" line="244" static="1"><f a=""><c path="hxdoom.core.IOCore"/></f></get_IO>
		<get_SOUND set="method" line="249" static="1"><f a=""><c path="hxdoom.core.SoundCore"/></f></get_SOUND>
		<get_PROFILE set="method" line="254" static="1"><f a=""><c path="hxdoom.core.ProfileCore"/></f></get_PROFILE>
		<get_LEVELS set="method" line="259" static="1"><f a=""><c path="hxdoom.core.LevelCore"/></f></get_LEVELS>
		<get_TEXTURES set="method" line="264" static="1"><f a=""><c path="hxdoom.core.TextureCore"/></f></get_TEXTURES>
		<mapindex expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</mapindex>
		<setcore_game public="1" set="method" line="86">
			<f a="?_game">
				<c path="hxdoom.core.GameCore"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Setter to override GameCore behavior. Changes CVar flag when overriden. Optional.
	 * @param	_cheats Providing 'null' will reset to default core</haxe_doc>
		</setcore_game>
		<setcore_IO public="1" set="method" line="99">
			<f a="?_IO">
				<c path="hxdoom.core.IOCore"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Setter to override IOCore behavior. Changes CVar flag when overriden. Optional.
	 * @param	_cheats Providing 'null' will reset to default core</haxe_doc>
		</setcore_IO>
		<setcore_profile public="1" set="method" line="112">
			<f a="?_profile">
				<c path="hxdoom.core.ProfileCore"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Setter to override ProfileCore behavior. Changes CVar flag when overriden. Optional.
	 * @param	_cheats Providing 'null' will reset to default core</haxe_doc>
		</setcore_profile>
		<setcore_render public="1" set="method" line="125">
			<f a="?_render">
				<c path="hxdoom.core.RenderCore"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Setter to override RenderCore behavior. Changes CVar flag when overriden. Mandatory to draw a scene.
	 * @param	_cheats Providing 'null' will reset to default core</haxe_doc>
		</setcore_render>
		<setcore_textures public="1" set="method" line="138">
			<f a="?_textures">
				<c path="hxdoom.core.TextureCore"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Setter to override TextureCore behavior. Changes CVar flag when overriden. Optional.
	 * @param	_cheats Providing 'null' will reset to default core</haxe_doc>
		</setcore_textures>
		<setcore_levels public="1" set="method" line="147"><f a="?_levels">
	<c path="hxdoom.core.LevelCore"/>
	<x path="Void"/>
</f></setcore_levels>
		<loadMap public="1" set="method" line="160">
			<f a="_mapMarker">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Default function to load a map that's set to Engine.LOADMAP()
	 * @param	_mapMarker String denoting map marker directory</haxe_doc>
		</loadMap>
		<addWadBytes public="1" set="method" line="178">
			<f a="_wadBytes:_wadName">
				<c path="haxe.io.Bytes"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds and parses wad into memory.
	 * @param	_wadBytes Wad as bytes
	 * @param	_wadName Name of wad</haxe_doc>
		</addWadBytes>
		<addWadString public="1" set="method" line="181"><f a="_wadString:_wadname">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addWadString>
		<setDefaultCVARS public="1" set="method" line="187">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Sets default CVar environment vars.</haxe_doc>
		</setDefaultCVARS>
		<new public="1" set="method" line="65"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Engine.hx acts as the hub class for accessing data. It contains "cores" that can be utilized for wad data manipulation.
 * Cores can be overriden by the developers to modify behavior. Some of these cores are mandatory to change in order to use.
 * @see https://kevansevans.github.io/HxDoom/demo/
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.actors.Actor" params="" file="src/hxdoom/actors/Actor.hx">
		<CONSTRUCTOR public="1" expr="Actor.new" line="16" static="1">
			<f a=""><c path="hxdoom.actors.Actor"/></f>
			<meta><m n=":value"><e>Actor.new</e></m></meta>
		</CONSTRUCTOR>
		<fromThing public="1" set="method" line="32" static="1"><f a="_thing">
	<c path="hxdoom.component.Thing"/>
	<c path="hxdoom.actors.Actor"/>
</f></fromThing>
		<xpos public="1" get="accessor" expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</xpos>
		<ypos public="1" get="accessor" expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</ypos>
		<zpos public="1" get="accessor" expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</zpos>
		<zpos_flight public="1"><x path="Float"/></zpos_flight>
		<zpos_eyeheight public="1"><x path="Float"/></zpos_eyeheight>
		<zpos_view public="1" get="accessor" set="null"><x path="Float"/></zpos_view>
		<pitch public="1" get="accessor" expr="0.0">
			<x path="hxdoom.utils.geom.Angle"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</pitch>
		<yaw public="1" get="accessor" expr="0.0">
			<x path="hxdoom.utils.geom.Angle"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</yaw>
		<roll public="1" get="accessor" expr="0.0">
			<x path="hxdoom.utils.geom.Angle"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</roll>
		<type public="1"><x path="Int"/></type>
		<flags public="1"><x path="Int"/></flags>
		<angleToVertex public="1" set="method" line="49"><f a="_vertex">
	<c path="hxdoom.lumps.map.Vertex"/>
	<x path="hxdoom.utils.geom.Angle"/>
</f></angleToVertex>
		<move public="1" set="method" line="57"><f a="_value">
	<x path="Float"/>
	<x path="Void"/>
</f></move>
		<get_zpos_view set="method" line="62"><f a=""><x path="Float"/></f></get_zpos_view>
		<get_xpos public="1" set="method" line="67"><f a=""><x path="Float"/></f></get_xpos>
		<get_ypos public="1" set="method" line="72"><f a=""><x path="Float"/></f></get_ypos>
		<get_zpos public="1" set="method" line="77"><f a=""><x path="Float"/></f></get_zpos>
		<get_pitch public="1" set="method" line="82"><f a=""><x path="hxdoom.utils.geom.Angle"/></f></get_pitch>
		<get_yaw public="1" set="method" line="87"><f a=""><x path="hxdoom.utils.geom.Angle"/></f></get_yaw>
		<get_roll public="1" set="method" line="92"><f a=""><x path="hxdoom.utils.geom.Angle"/></f></get_roll>
		<new public="1" set="method" line="44"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan
 * 
 * Taking the GZDoom approach here and having each class type behave on inheritance rather than each possesing their own properties.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.actors.Player" params="" file="src/hxdoom/actors/Player.hx">
		<extends path="hxdoom.actors.Actor"/>
		<CONSTRUCTOR public="1" expr="Player.new" line="11" static="1">
			<f a=""><c path="hxdoom.actors.Player"/></f>
			<meta><m n=":value"><e>Player.new</e></m></meta>
		</CONSTRUCTOR>
		<fromThing public="1" set="method" line="13" static="1"><f a="_thing">
	<c path="hxdoom.component.Thing"/>
	<c path="hxdoom.actors.Player"/>
</f></fromThing>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.component.Camera" params="" file="src/hxdoom/component/Camera.hx">
		<extends path="hxdoom.actors.Actor"/>
		<actorToFollow public="1"><x path="Null"><c path="hxdoom.actors.Actor"/></x></actorToFollow>
		<cameraPoint public="1"><x path="Null"><c path="hxdoom.component.CameraPoint"/></x></cameraPoint>
		<get_xpos public="1" set="method" line="26" override="1"><f a=""><x path="Float"/></f></get_xpos>
		<get_ypos public="1" set="method" line="35" override="1"><f a=""><x path="Float"/></f></get_ypos>
		<get_zpos public="1" set="method" line="44" override="1"><f a=""><x path="Float"/></f></get_zpos>
		<get_pitch public="1" set="method" line="53" override="1"><f a=""><x path="hxdoom.utils.geom.Angle"/></f></get_pitch>
		<get_yaw public="1" set="method" line="66" override="1"><f a=""><x path="hxdoom.utils.geom.Angle"/></f></get_yaw>
		<get_roll public="1" set="method" line="82" override="1"><f a=""><x path="hxdoom.utils.geom.Angle"/></f></get_roll>
		<new public="1" set="method" line="18"><f a="?_follow:?_pointingAt">
	<c path="hxdoom.actors.Actor"/>
	<c path="hxdoom.component.CameraPoint"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Camera class that follows a given actor, if provided, and points at a given camera point, if provided.
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.component.CameraPoint" params="" file="src/hxdoom/component/CameraPoint.hx">
		<fromActor public="1" set="method" line="67" static="1">
			<f a="_actor">
				<c path="hxdoom.actors.Actor"/>
				<c path="hxdoom.component.CameraPoint"/>
			</f>
			<haxe_doc>* 
	 * @param	_actor Any item within a map
	 * @return New camera point automatically set to the location of provided actor</haxe_doc>
		</fromActor>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</y>
		<z public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</z>
		<follow public="1"><c path="hxdoom.actors.Actor"/></follow>
		<get_x set="method" line="23"><f a=""><x path="Float"/></f></get_x>
		<get_y set="method" line="32"><f a=""><x path="Float"/></f></get_y>
		<get_z set="method" line="41"><f a=""><x path="Float"/></f></get_z>
		<set_x set="method" line="50"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y set="method" line="54"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_z set="method" line="58"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<new public="1" set="method" line="16">
			<f a="?_x:?_y:?_z" v="0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ _z : 0, _y : 0, _x : 0 }</e></m></meta>
		</new>
		<haxe_doc>* Acts as a location for a camera to point to. Can be set to follow an actor.
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.component.LevelMap" params="" file="src/hxdoom/component/LevelMap.hx">
		<name public="1"><c path="String"/></name>
		<things public="1"><c path="Array"><c path="hxdoom.component.Thing"/></c></things>
		<actors public="1"><c path="Array"><c path="hxdoom.actors.Actor"/></c></actors>
		<vertexes public="1"><c path="Array"><c path="hxdoom.lumps.map.Vertex"/></c></vertexes>
		<linedefs public="1"><c path="Array"><c path="hxdoom.lumps.map.LineDef"/></c></linedefs>
		<nodes public="1"><c path="Array"><c path="hxdoom.lumps.map.Node"/></c></nodes>
		<subsectors public="1"><c path="Array"><c path="hxdoom.lumps.map.SubSector"/></c></subsectors>
		<segments public="1"><c path="Array"><c path="hxdoom.lumps.map.Segment"/></c></segments>
		<sidedefs public="1"><c path="Array"><c path="hxdoom.lumps.map.SideDef"/></c></sidedefs>
		<sectors public="1"><c path="Array"><c path="hxdoom.lumps.map.Sector"/></c></sectors>
		<offset_x public="1"><x path="Float"/></offset_x>
		<offset_y public="1"><x path="Float"/></offset_y>
		<actors_players public="1"><c path="Array"><c path="hxdoom.actors.Player"/></c></actors_players>
		<camera public="1"><c path="hxdoom.component.Camera"/></camera>
		<focus public="1"><c path="hxdoom.component.CameraPoint"/></focus>
		<build public="1" set="method" line="54"><f a=""><x path="Void"/></f></build>
		<parseThings public="1" set="method" line="62"><f a=""><x path="Void"/></f></parseThings>
		<getActorSubsector public="1" set="method" line="74"><f a="_actor">
	<c path="hxdoom.actors.Actor"/>
	<c path="hxdoom.lumps.map.SubSector"/>
</f></getActorSubsector>
		<setOffset public="1" set="method" line="89"><f a=""><x path="Void"/></f></setOffset>
		<isPointOnBackSide public="1" set="method" line="101"><f a="_x:_y:_nodeID">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isPointOnBackSide>
		<copy public="1" set="method" line="109"><f a=""><c path="hxdoom.component.LevelMap"/></f></copy>
		<new public="1" set="method" line="41"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.component.Texture" params="" file="src/hxdoom/component/Texture.hx">
		<CONSTRUCTOR public="1" expr="Texture.new" line="15" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.component.Texture"/>
			</f>
			<meta><m n=":value"><e>Texture.new</e></m></meta>
		</CONSTRUCTOR>
		<data public="1"><t path="hxdoom.typedefs.graphics.TextureData"/></data>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<pixels public="1"><c path="Array"><c path="Array"><x path="Int"/></c></c></pixels>
		<new public="1" set="method" line="23"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.component.Thing" params="" file="src/hxdoom/component/Thing.hx">
		<CONSTRUCTOR public="1" expr="Thing.new" line="12" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.component.Thing"/>
			</f>
			<meta><m n=":value"><e>Thing.new</e></m></meta>
		</CONSTRUCTOR>
		<xpos public="1"><x path="Int"/></xpos>
		<ypos public="1"><x path="Int"/></ypos>
		<angle public="1"><x path="Int"/></angle>
		<type public="1"><x path="Int"/></type>
		<flags public="1"><x path="Int"/></flags>
		<toString public="1" set="method" line="28"><f a=""><c path="String"/></f></toString>
		<cardinality public="1" set="method" line="37"><f a="_angle">
	<x path="Int"/>
	<c path="String"/>
</f></cardinality>
		<new public="1" set="method" line="19"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.ActorCore" params="" file="src/hxdoom/core/ActorCore.hx">
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
	</class>
	<typedef path="hxdoom.core.CVar" params="" file="src/hxdoom/core/CVarCore.hx" module="hxdoom.core.CVarCore">
		<a>
			<value><x path="Any"/></value>
			<type>
				<e path="hxdoom.enums.data.CVarType"/>
				<haxe_doc>* Controls the return behavior when accessing this CVar.</haxe_doc>
			</type>
			<onSet>
				<x path="Null"><f a=""><x path="Void"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Function to call if this CVar is changed.</haxe_doc>
			</onSet>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>* Main handler for controlling CVar behavior.
 * @author Kaelan</haxe_doc>
	</typedef>
	<class path="hxdoom.core.CVarCore" params="" file="src/hxdoom/core/CVarCore.hx">
		<CVarMap expr="new Map()" line="25" static="1">
			<t path="Map">
				<c path="String"/>
				<t path="hxdoom.core.CVar"/>
			</t>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</CVarMap>
		<setNewCVar public="1" get="inline" set="null" line="40" static="1">
			<f a="_name:_type:_value:?_onSet:?_callAfterSet" v="::::false">
				<c path="String"/>
				<e path="hxdoom.enums.data.CVarType"/>
				<x path="Any"/>
				<f a=""><x path="Void"/></f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ _callAfterSet : false }</e></m></meta>
			<haxe_doc>* Call to set a new CVar. Will not allow replacement of existing CVars.
	 * @param	_name Namespace of CVar
	 * @param	_type What type of data will it be storing, dictates reading and writing behavior
	 * @param	_value Value to set this CVar to
	 * @param	_onSet Function to call when changing the value
	 * @param	_callAfterSet Call this function immedaitely after creating this CVar</haxe_doc>
		</setNewCVar>
		<replaceCvar public="1" get="inline" set="null" line="61" static="1">
			<f a="_name:_type:_value:?_onSet:?_callAfterSet" v="::::false">
				<c path="String"/>
				<e path="hxdoom.enums.data.CVarType"/>
				<x path="Any"/>
				<f a=""><x path="Void"/></f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ _callAfterSet : false }</e></m></meta>
			<haxe_doc>* To call to replace an existing CVar
	 * @param	_name Namespace of CVar
	 * @param	_type What type of data will it be storing, dictates reading and writing behavior
	 * @param	_value Value to set this CVar to
	 * @param	_onSet Function to call when changing the value
	 * @param	_callAfterSet Call this function immedaitely after creating this CVar</haxe_doc>
		</replaceCvar>
		<doNothingOnSet public="1" set="method" line="70" static="1"><f a=""><x path="Void"/></f></doNothingOnSet>
		<setCVar public="1" set="method" line="77" static="1">
			<f a="_name:_value:?_doNotCallFunction" v="::false">
				<c path="String"/>
				<x path="Any"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ _doNotCallFunction : false }</e></m></meta>
			<haxe_doc>* Change the value of an existing CVar
	 * @param	_name Name of CVar to set
	 * @param	_value Value to set CVar to
	 * @param	_doNotCallFunction When set to true, the CVar's attached funtion will not be called</haxe_doc>
		</setCVar>
		<getCvar public="1" set="method" line="110" static="1">
			<f a="_name">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>* Gets value of CVar. Type of value returned depends on type of CVar set.
	 * @param	_name Name of CVar needed
	 * @return Int, Float, String, or Bool</haxe_doc>
		</getCvar>
		<new public="1" set="method" line="27"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxdoom.core.EngineState" params="" file="src/hxdoom/core/GameCore.hx" module="hxdoom.core.GameCore">
		<START_MENU/>
		<IN_GAME/>
		<IN_GAME_MENU/>
		<IN_GAME_PAUSE/>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxdoom.core.GameCore" params="" file="src/hxdoom/core/GameCore.hx">
		<STATE public="1" static="1"><e path="hxdoom.core.EngineState"/></STATE>
		<ticrate public="1" expr="35">
			<x path="Int"/>
			<meta><m n=":value"><e>35</e></m></meta>
		</ticrate>
		<start public="1" set="method" line="30"><f a=""><x path="Void"/></f></start>
		<stop public="1" set="method" line="34"><f a=""><x path="Void"/></f></stop>
		<tick public="1" set="method" line="39"><f a=""><x path="Void"/></f></tick>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.IOCore" params="" file="src/hxdoom/core/IOCore.hx">
		<IGNORE_SHIFT public="1" expr="true" line="14" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</IGNORE_SHIFT>
		<SHIFT_IS_DOWN public="1" expr="false" line="15" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</SHIFT_IS_DOWN>
		<keyPressAction public="1"><t path="Map">
	<x path="Int"/>
	<c path="Array"><f a=""><x path="Void"/></f></c>
</t></keyPressAction>
		<keyReleaseAction public="1"><t path="Map">
	<x path="Int"/>
	<c path="Array"><f a=""><x path="Void"/></f></c>
</t></keyReleaseAction>
		<keyPress public="1" set="method" line="27"><f a="_keyCode">
	<x path="Int"/>
	<x path="Void"/>
</f></keyPress>
		<keyRelease public="1" set="method" line="62"><f a="_keyCode">
	<x path="Int"/>
	<x path="Void"/>
</f></keyRelease>
		<keyCharToInt set="method" line="86"><f a="keyChar">
	<c path="String"/>
	<x path="Int"/>
</f></keyCharToInt>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.LevelCore" params="" file="src/hxdoom/core/LevelCore.hx">
		<levelData public="1"><c path="Array"><t path="hxdoom.typedefs.data.MapProperties"/></c></levelData>
		<episodeData public="1"><c path="Array"><t path="hxdoom.typedefs.data.EpisodeProperties"/></c></episodeData>
		<currentMap public="1"><c path="hxdoom.component.LevelMap"/></currentMap>
		<currentMapData public="1"><t path="hxdoom.typedefs.data.MapProperties"/></currentMapData>
		<currentEpisodeData public="1"><t path="hxdoom.typedefs.data.EpisodeProperties"/></currentEpisodeData>
		<needToRebuild public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</needToRebuild>
		<startEpisode public="1" set="method" line="28"><f a="_index">
	<x path="Int"/>
	<x path="Void"/>
</f></startEpisode>
		<startMap public="1" set="method" line="36"><f a="_index">
	<x path="Int"/>
	<x path="Void"/>
</f></startMap>
		<exitMapNormal public="1" set="method" line="44"><f a=""><x path="Void"/></f></exitMapNormal>
		<exitMapSecret public="1" set="method" line="52"><f a=""><x path="Void"/></f></exitMapSecret>
		<loadMap public="1" set="method" line="62"><f a="_mapMarker">
	<c path="String"/>
	<x path="Bool"/>
</f></loadMap>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.ProfileCore" params="" file="src/hxdoom/core/ProfileCore.hx">
		<getNextMap public="1" set="method" line="21"><f a="_currentMap">
	<c path="String"/>
	<c path="String"/>
</f></getNextMap>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.Reader" params="" file="src/hxdoom/core/Reader.hx">
		<VERTEX_LUMP_SIZE public="1" get="inline" set="null" expr="4" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</VERTEX_LUMP_SIZE>
		<LINEDEF_LUMP_SIZE public="1" get="inline" set="null" expr="14" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</LINEDEF_LUMP_SIZE>
		<THING_LUMP_SIZE public="1" get="inline" set="null" expr="10" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</THING_LUMP_SIZE>
		<NODE_LUMP_SIZE public="1" get="inline" set="null" expr="28" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</NODE_LUMP_SIZE>
		<SSECTOR_LUMP_SIZE public="1" get="inline" set="null" expr="4" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SSECTOR_LUMP_SIZE>
		<SEG_LUMP_SIZE public="1" get="inline" set="null" expr="12" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SEG_LUMP_SIZE>
		<SIDEDEF_LUMP_SIZE public="1" get="inline" set="null" expr="30" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</SIDEDEF_LUMP_SIZE>
		<SECTOR_LUMP_SIZE public="1" get="inline" set="null" expr="26" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>26</e></m></meta>
		</SECTOR_LUMP_SIZE>
		<keyLumpList public="1" static="1"><c path="Array"><c path="String"/></c></keyLumpList>
		<dataLumpList public="1" static="1"><c path="Array"><c path="String"/></c></dataLumpList>
		<readDirectory public="1" get="inline" set="null" line="48" static="1">
			<f a="_data:_offset:?_wadname:?_index" v="::&quot;&quot;:-1">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="hxdoom.lumps.Directory"/>
			</f>
			<meta><m n=":value"><e>{ _index : -1, _wadname : "" }</e></m></meta>
			<haxe_doc>* Reads from provided data and returns a new directory.
	 * @param	_data
	 * @param	_offset
	 * @param	_wadname
	 * @param	_index
	 * @return</haxe_doc>
		</readDirectory>
		<readThing public="1" get="inline" set="null" line="63" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.component.Thing"/>
			</f>
			<haxe_doc>* Reads from provided data and returns a new Thing
	 * @param	_data
	 * @param	_offset
	 * @return</haxe_doc>
		</readThing>
		<readLinedef public="1" get="inline" set="null" line="78" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.map.LineDef"/>
			</f>
			<haxe_doc>* Reads from provided data and returns a new Linedef
	 * @param	_data
	 * @param	_offset
	 * @return</haxe_doc>
		</readLinedef>
		<readVertex public="1" get="inline" set="null" line="95" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.map.Vertex"/>
			</f>
			<haxe_doc>* Reads from provided data and returns a new Vertex
	 * @param	_data
	 * @param	_offset
	 * @return</haxe_doc>
		</readVertex>
		<readSegment public="1" get="inline" set="null" line="109" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.map.Segment"/>
			</f>
			<haxe_doc>* Reads from provided data and returns a new Segment
	 * @param	_data
	 * @param	_offset
	 * @return</haxe_doc>
		</readSegment>
		<readSubSector public="1" get="inline" set="null" line="123" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.map.SubSector"/>
			</f>
			<haxe_doc>* Reads from provided data and returns a new Subsector
	 * @param	_data
	 * @param	_offset
	 * @return</haxe_doc>
		</readSubSector>
		<readNode public="1" get="inline" set="null" line="135" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.map.Node"/>
			</f>
			<haxe_doc>* Reads from provided data and returns a new Node
	 * @param	_data
	 * @param	_offset
	 * @return</haxe_doc>
		</readNode>
		<readSideDef public="1" get="inline" set="null" line="159" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.map.SideDef"/>
			</f>
			<haxe_doc>* Reads from provided data and returns a new Sidedef
	 * @param	_data
	 * @param	_offset
	 * @return</haxe_doc>
		</readSideDef>
		<readSector public="1" get="inline" set="null" line="175" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.map.Sector"/>
			</f>
			<haxe_doc>* Reads from provided data and returns a new Sector
	 * @param	_data
	 * @param	_offset
	 * @return</haxe_doc>
		</readSector>
		<readPatchNames public="1" get="inline" set="null" line="193" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.graphic.PatchNames"/>
			</f>
			<haxe_doc>* Read lump as PName
	 * @param	_data
	 * @param	_offset
	 * @param	_size
	 * @return</haxe_doc>
		</readPatchNames>
		<readTextureInfo public="1" get="inline" set="null" line="201" static="1"><f a="_data:_offset">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="hxdoom.lumps.graphic.TextureInfo"/>
</f></readTextureInfo>
		<getPatchLayoutList public="1" get="inline" set="null" line="226" static="1"><f a="_data:_offset">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><t path="hxdoom.typedefs.graphics.PatchLayout"/></c>
</f></getPatchLayoutList>
		<readPatch public="1" get="inline" set="null" line="244" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="hxdoom.lumps.graphic.Patch"/>
			</f>
			<haxe_doc>* Read data and return a patch from given location
	 * @param	_data Specified wad data array
	 * @param	_offset Location of patch
	 * @return New patch with correct data values</haxe_doc>
		</readPatch>
		<getLumpType public="1" set="method" line="288" static="1">
			<f a="_dir:?_returnAsLump" v=":false">
				<c path="hxdoom.lumps.Directory"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ _returnAsLump : false }</e></m></meta>
		</getLumpType>
		<getOneByte public="1" get="inline" set="null" line="344" static="1">
			<f a="_data:_offset:?_signed" v="::false">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ _signed : false }</e></m></meta>
			<haxe_doc>* Get an 8 bit value from provided data and location
	 * @param	_data Data of current wad loaded
	 * @param	_offset Position of data needed
	 * @param	_signed Is value a signed value?
	 * @return Returns an integer from specified position</haxe_doc>
		</getOneByte>
		<getTwoBytes public="1" get="inline" set="null" line="355" static="1">
			<f a="_data:_offset:?_signed" v="::false">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ _signed : false }</e></m></meta>
			<haxe_doc>* Get a 16 bit value (Short) from provided data and location
	 * @param	_data
	 * @param	_offset
	 * @param	_signed
	 * @return</haxe_doc>
		</getTwoBytes>
		<getFourBytes public="1" get="inline" set="null" line="366" static="1">
			<f a="_data:_offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get a 32 bit bit value (Long) from provided data and location
	 * @param	_data Data of current wad loaded
	 * @param	_offset Position of data needed
	 * @return Returns an integer from specified position</haxe_doc>
		</getFourBytes>
		<getStringFromRange public="1" get="inline" set="null" line="376" static="1">
			<f a="_data:_start:_end">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Get and construct a string value from specified range 
	 * @param	_data Data of current wad loaded
	 * @param	_start Start position of string
	 * @param	_end End position of string
	 * @return	Returns a UTF8 compatible string. Automatically removes null and empty characters.</haxe_doc>
		</getStringFromRange>
		<new public="1" set="method" line="38"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.RenderCore" params="" file="src/hxdoom/core/RenderCore.hx">
		<virtual_screen public="1"><x path="haxe.ds.Map">
	<x path="Int"/>
	<c path="hxdoom.lumps.map.Segment"/>
</x></virtual_screen>
		<vis_segments public="1"><c path="Array"><c path="hxdoom.lumps.map.Segment"/></c></vis_segments>
		<vis_subsecs public="1"><c path="Array"><c path="hxdoom.lumps.map.SubSector"/></c></vis_subsecs>
		<vis_floors public="1"><c path="Array"><c path="hxdoom.lumps.map.Segment"/></c></vis_floors>
		<screen_width public="1" set="accessor" expr="320">
			<x path="Int"/>
			<meta><m n=":value"><e>320</e></m></meta>
		</screen_width>
		<spanlimit public="1" expr="180">
			<x path="Int"/>
			<meta><m n=":value"><e>180</e></m></meta>
		</spanlimit>
		<scanning public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</scanning>
		<initScene public="1" set="method" line="33"><f a=""><x path="Void"/></f></initScene>
		<resize public="1" set="method" line="35"><f a="_width:_height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<setVisibleSegments public="1" set="method" line="37"><f a="?_subsec">
	<x path="Int"/>
	<x path="Void"/>
</f></setVisibleSegments>
		<recursiveNodeTraversalVisibility public="1" set="method" line="52"><f a="_nodeIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></recursiveNodeTraversalVisibility>
		<subsectorVisibilityCheck public="1" set="method" line="73"><f a="_subsector">
	<x path="Int"/>
	<x path="Void"/>
</f></subsectorVisibilityCheck>
		<registerSegToScreenWidth public="1" set="method" line="133"><f a="_seg:_start:_end">
	<c path="hxdoom.lumps.map.Segment"/>
	<x path="hxdoom.utils.geom.Angle"/>
	<x path="hxdoom.utils.geom.Angle"/>
	<x path="Void"/>
</f></registerSegToScreenWidth>
		<checkScreenFill set="method" line="155"><f a=""><x path="Void"/></f></checkScreenFill>
		<angleToScreen public="1" set="method" line="166"><f a="_angle:_fov">
	<x path="hxdoom.utils.geom.Angle"/>
	<x path="Int"/>
	<x path="Int"/>
</f></angleToScreen>
		<set_screen_width set="method" line="179"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_screen_width>
		<render_scene public="1" set="method" line="184"><f a=""><x path="Void"/></f></render_scene>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.SoundCore" params="" file="src/hxdoom/core/SoundCore.hx">
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.TextureCore" params="" file="src/hxdoom/core/TextureCore.hx">
		<playpal public="1"><c path="hxdoom.lumps.graphic.Playpal"/></playpal>
		<patches public="1"><c path="Array"><c path="String"/></c></patches>
		<textureData public="1"><t path="Map">
	<c path="String"/>
	<t path="hxdoom.typedefs.graphics.TextureData"/>
</t></textureData>
		<textures public="1"><t path="Map">
	<c path="String"/>
	<c path="hxdoom.component.Texture"/>
</t></textures>
		<loadPlaypal public="1" set="method" line="27"><f a=""><x path="Void"/></f></loadPlaypal>
		<parsePatchNames public="1" set="method" line="52"><f a=""><x path="Void"/></f></parsePatchNames>
		<parseTextures public="1" set="method" line="60"><f a=""><x path="Void"/></f></parseTextures>
		<getTexture public="1" set="method" line="82"><f a="_name">
	<c path="String"/>
	<c path="hxdoom.component.Texture"/>
</f></getTexture>
		<getPatch public="1" set="method" line="91"><f a="_patchName">
	<c path="String"/>
	<c path="hxdoom.lumps.graphic.Patch"/>
</f></getPatch>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.core.WadCore" params="" file="src/hxdoom/core/WadCore.hx">
		<iwadLoaded expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</iwadLoaded>
		<lastKeyLumpMarkerRead><x path="hxdoom.enums.eng.KeyLump"/></lastKeyLumpMarkerRead>
		<directory_name_map><t path="Map">
	<c path="String"/>
	<c path="Array"><c path="hxdoom.lumps.Directory"/></c>
</t></directory_name_map>
		<directory_index_map><t path="Map">
	<c path="String"/>
	<c path="Array"><c path="hxdoom.lumps.Directory"/></c>
</t></directory_index_map>
		<wad_data_map><t path="Map">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</t></wad_data_map>
		<addWadFromString public="1" set="method" line="36"><f a="_data:_wadName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addWadFromString>
		<addWadFromBytes public="1" set="method" line="61"><f a="_data:_wadName">
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
	<x path="Void"/>
</f></addWadFromBytes>
		<parseWad public="1" set="method" line="85"><f a="_wadName">
	<c path="String"/>
	<x path="Void"/>
</f></parseWad>
		<indexLump public="1" set="method" line="114"><f a="_dir">
	<c path="hxdoom.lumps.Directory"/>
	<x path="Void"/>
</f></indexLump>
		<getGeneralDir public="1" set="method" line="123">
			<f a="_name:?_index" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<c path="hxdoom.lumps.Directory"/>
			</f>
			<meta><m n=":value"><e>{ _index : 0 }</e></m></meta>
		</getGeneralDir>
		<getWadSpecificDir public="1" set="method" line="127"><f a="_wad:_index">
	<c path="String"/>
	<x path="Int"/>
	<c path="hxdoom.lumps.Directory"/>
</f></getWadSpecificDir>
		<getWadByteArray public="1" set="method" line="131"><f a="_name">
	<c path="String"/>
	<x path="Null"><c path="Array"><x path="Int"/></c></x>
</f></getWadByteArray>
		<wadContains public="1" set="method" line="135"><f a="_lumps">
	<c path="Array"><c path="String"/></c>
	<x path="Bool"/>
</f></wadContains>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.enums.EnumTool" params="" file="src/hxdoom/enums/EnumTool.hx">
		<toStringArray public="1" set="method" static="1"><f a="typePath">
	<d/>
	<d/>
</f></toStringArray>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
	</class>
	<enum path="hxdoom.enums.data.CVarType" params="" file="src/hxdoom/enums/data/CVarType.hx">
		<CInt/>
		<CFloat/>
		<CString/>
		<CBool/>
		<haxe_doc>* @author Kaelan</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<abstract path="hxdoom.enums.data.Defaults" params="" file="src/hxdoom/enums/data/Defaults.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<haxe_doc>* @author Kaelan
 * 
 * Contains the default CVar values needed.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.data._Defaults.Defaults_Impl_" params="" file="src/hxdoom/enums/data/Defaults.hx" private="1" module="hxdoom.enums.data.Defaults" extern="1" final="1">
	<ALLOW_MULTIPLE_IWADS public="1" get="inline" set="null" expr="cast &quot;ALLOW_MULTIPLE_IWADS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "ALLOW_MULTIPLE_IWADS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Game engines typically only allow single IWADS to be loaded, this serves as a buffer to allow the engine to catch if a second IWAD has been attempted to load.</haxe_doc>
	</ALLOW_MULTIPLE_IWADS>
	<ALLOW_PWADS public="1" get="inline" set="null" expr="cast &quot;ALLOW_PWADS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "ALLOW_PWADS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default True. Shareware wads are not allowed to be modded. This flag is set to false when a shareware IWAD is loaded.</haxe_doc>
	</ALLOW_PWADS>
	<AUTOMAP_MODE public="1" get="inline" set="null" expr="cast &quot;AUTOMAP_MODE&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "AUTOMAP_MODE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Is player viewing the automap?</haxe_doc>
	</AUTOMAP_MODE>
	<AUTOMAP_ROTATES_WITH_PLAYER public="1" get="inline" set="null" expr="cast &quot;AUTOMAP_ROTATES_WITH_PLAYER&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "AUTOMAP_ROTATES_WITH_PLAYER"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Automap lines rotate with player to match the direction they're facing.</haxe_doc>
	</AUTOMAP_ROTATES_WITH_PLAYER>
	<AUTOMAP_ZOOM public="1" get="inline" set="null" expr="cast &quot;AUTOMAP_ZOOM&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "AUTOMAP_ZOOM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Float, default 0.001. Zoom level of automap.</haxe_doc>
	</AUTOMAP_ZOOM>
	<CHEAT_NOCLIP public="1" get="inline" set="null" expr="cast &quot;CHEAT_NOCLIP&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "CHEAT_NOCLIP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</CHEAT_NOCLIP>
	<CHEAT_DEGREELESS public="1" get="inline" set="null" expr="cast &quot;CHEAT_DEGREELESS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "CHEAT_DEGREELESS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</CHEAT_DEGREELESS>
	<CHEAT_TRUEGOD public="1" get="inline" set="null" expr="cast &quot;CHEAT_TRUEGOD&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "CHEAT_TRUEGOD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</CHEAT_TRUEGOD>
	<OVERRIDE_CHEATS public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_CHEATS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "OVERRIDE_CHEATS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
	</OVERRIDE_CHEATS>
	<OVERRIDE_GAME public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_GAME&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "OVERRIDE_GAME"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
	</OVERRIDE_GAME>
	<OVERRIDE_IO public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_IO&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "OVERRIDE_IO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
	</OVERRIDE_IO>
	<OVERRIDE_PROFILE public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_PROFILE&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "OVERRIDE_PROFILE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
	</OVERRIDE_PROFILE>
	<OVERRIDE_RENDER public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_RENDER&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "OVERRIDE_RENDER"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
	</OVERRIDE_RENDER>
	<OVERRIDE_SOUND public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_SOUND&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "OVERRIDE_SOUND"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
	</OVERRIDE_SOUND>
	<OVERRIDE_TEXTURES public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_TEXTURES&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "OVERRIDE_TEXTURES"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
	</OVERRIDE_TEXTURES>
	<OVERRIDE_LEVELS public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_LEVELS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "OVERRIDE_LEVELS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
	</OVERRIDE_LEVELS>
	<PLAYER_FOV public="1" get="inline" set="null" expr="cast &quot;PLAYER_FOV&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYER_FOV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Int, default 90.</haxe_doc>
	</PLAYER_FOV>
	<PLAYER_VIEW_HEIGHT public="1" get="inline" set="null" expr="cast &quot;PLAYER_VIEW_HEIGHT&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYER_VIEW_HEIGHT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Int, default 41.</haxe_doc>
	</PLAYER_VIEW_HEIGHT>
	<PLAYER_MOVING_FORWARD public="1" get="inline" set="null" expr="cast &quot;PLAYER_MOVING_FORWARD&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYER_MOVING_FORWARD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</PLAYER_MOVING_FORWARD>
	<PLAYER_MOVING_BACKWARD public="1" get="inline" set="null" expr="cast &quot;PLAYER_MOVING_BACKWARD&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYER_MOVING_BACKWARD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</PLAYER_MOVING_BACKWARD>
	<PLAYER_STRAFING_LEFT public="1" get="inline" set="null" expr="cast &quot;PLAYER_STRAFING_LEFT&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYER_STRAFING_LEFT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</PLAYER_STRAFING_LEFT>
	<PLAYER_STRAFING_RIGHT public="1" get="inline" set="null" expr="cast &quot;PLAYER_STRAFING_RIGHT&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYER_STRAFING_RIGHT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</PLAYER_STRAFING_RIGHT>
	<PLAYER_TURNING_LEFT public="1" get="inline" set="null" expr="cast &quot;PLAYER_TURNING_LEFT&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYER_TURNING_LEFT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</PLAYER_TURNING_LEFT>
	<PLAYER_TURNING_RIGHT public="1" get="inline" set="null" expr="cast &quot;PLAYER_TURNING_RIGHT&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYER_TURNING_RIGHT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</PLAYER_TURNING_RIGHT>
	<SCREEN_DISTANCE_FROM_VIEWER public="1" get="inline" set="null" expr="cast &quot;SCREEN_DISTANCE_FROM_VIEWER&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SCREEN_DISTANCE_FROM_VIEWER"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Int, default 160.</haxe_doc>
	</SCREEN_DISTANCE_FROM_VIEWER>
	<WADS_LOADED public="1" get="inline" set="null" expr="cast &quot;WADS_LOADED&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "WADS_LOADED"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Bool, default false.</haxe_doc>
	</WADS_LOADED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.data._Defaults.Defaults_Impl_" params="" file="src/hxdoom/enums/data/Defaults.hx" private="1" module="hxdoom.enums.data.Defaults" extern="1" final="1">
		<ALLOW_MULTIPLE_IWADS public="1" get="inline" set="null" expr="cast &quot;ALLOW_MULTIPLE_IWADS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "ALLOW_MULTIPLE_IWADS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Game engines typically only allow single IWADS to be loaded, this serves as a buffer to allow the engine to catch if a second IWAD has been attempted to load.</haxe_doc>
		</ALLOW_MULTIPLE_IWADS>
		<ALLOW_PWADS public="1" get="inline" set="null" expr="cast &quot;ALLOW_PWADS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "ALLOW_PWADS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default True. Shareware wads are not allowed to be modded. This flag is set to false when a shareware IWAD is loaded.</haxe_doc>
		</ALLOW_PWADS>
		<AUTOMAP_MODE public="1" get="inline" set="null" expr="cast &quot;AUTOMAP_MODE&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "AUTOMAP_MODE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Is player viewing the automap?</haxe_doc>
		</AUTOMAP_MODE>
		<AUTOMAP_ROTATES_WITH_PLAYER public="1" get="inline" set="null" expr="cast &quot;AUTOMAP_ROTATES_WITH_PLAYER&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "AUTOMAP_ROTATES_WITH_PLAYER"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Automap lines rotate with player to match the direction they're facing.</haxe_doc>
		</AUTOMAP_ROTATES_WITH_PLAYER>
		<AUTOMAP_ZOOM public="1" get="inline" set="null" expr="cast &quot;AUTOMAP_ZOOM&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "AUTOMAP_ZOOM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Float, default 0.001. Zoom level of automap.</haxe_doc>
		</AUTOMAP_ZOOM>
		<CHEAT_NOCLIP public="1" get="inline" set="null" expr="cast &quot;CHEAT_NOCLIP&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "CHEAT_NOCLIP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</CHEAT_NOCLIP>
		<CHEAT_DEGREELESS public="1" get="inline" set="null" expr="cast &quot;CHEAT_DEGREELESS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "CHEAT_DEGREELESS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</CHEAT_DEGREELESS>
		<CHEAT_TRUEGOD public="1" get="inline" set="null" expr="cast &quot;CHEAT_TRUEGOD&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "CHEAT_TRUEGOD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</CHEAT_TRUEGOD>
		<OVERRIDE_CHEATS public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_CHEATS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "OVERRIDE_CHEATS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
		</OVERRIDE_CHEATS>
		<OVERRIDE_GAME public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_GAME&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "OVERRIDE_GAME"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
		</OVERRIDE_GAME>
		<OVERRIDE_IO public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_IO&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "OVERRIDE_IO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
		</OVERRIDE_IO>
		<OVERRIDE_PROFILE public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_PROFILE&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "OVERRIDE_PROFILE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
		</OVERRIDE_PROFILE>
		<OVERRIDE_RENDER public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_RENDER&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "OVERRIDE_RENDER"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
		</OVERRIDE_RENDER>
		<OVERRIDE_SOUND public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_SOUND&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "OVERRIDE_SOUND"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
		</OVERRIDE_SOUND>
		<OVERRIDE_TEXTURES public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_TEXTURES&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "OVERRIDE_TEXTURES"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
		</OVERRIDE_TEXTURES>
		<OVERRIDE_LEVELS public="1" get="inline" set="null" expr="cast &quot;OVERRIDE_LEVELS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "OVERRIDE_LEVELS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false. Has this core been overriden?</haxe_doc>
		</OVERRIDE_LEVELS>
		<PLAYER_FOV public="1" get="inline" set="null" expr="cast &quot;PLAYER_FOV&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYER_FOV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Int, default 90.</haxe_doc>
		</PLAYER_FOV>
		<PLAYER_VIEW_HEIGHT public="1" get="inline" set="null" expr="cast &quot;PLAYER_VIEW_HEIGHT&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYER_VIEW_HEIGHT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Int, default 41.</haxe_doc>
		</PLAYER_VIEW_HEIGHT>
		<PLAYER_MOVING_FORWARD public="1" get="inline" set="null" expr="cast &quot;PLAYER_MOVING_FORWARD&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYER_MOVING_FORWARD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</PLAYER_MOVING_FORWARD>
		<PLAYER_MOVING_BACKWARD public="1" get="inline" set="null" expr="cast &quot;PLAYER_MOVING_BACKWARD&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYER_MOVING_BACKWARD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</PLAYER_MOVING_BACKWARD>
		<PLAYER_STRAFING_LEFT public="1" get="inline" set="null" expr="cast &quot;PLAYER_STRAFING_LEFT&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYER_STRAFING_LEFT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</PLAYER_STRAFING_LEFT>
		<PLAYER_STRAFING_RIGHT public="1" get="inline" set="null" expr="cast &quot;PLAYER_STRAFING_RIGHT&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYER_STRAFING_RIGHT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</PLAYER_STRAFING_RIGHT>
		<PLAYER_TURNING_LEFT public="1" get="inline" set="null" expr="cast &quot;PLAYER_TURNING_LEFT&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYER_TURNING_LEFT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</PLAYER_TURNING_LEFT>
		<PLAYER_TURNING_RIGHT public="1" get="inline" set="null" expr="cast &quot;PLAYER_TURNING_RIGHT&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYER_TURNING_RIGHT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</PLAYER_TURNING_RIGHT>
		<SCREEN_DISTANCE_FROM_VIEWER public="1" get="inline" set="null" expr="cast &quot;SCREEN_DISTANCE_FROM_VIEWER&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SCREEN_DISTANCE_FROM_VIEWER"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Int, default 160.</haxe_doc>
		</SCREEN_DISTANCE_FROM_VIEWER>
		<WADS_LOADED public="1" get="inline" set="null" expr="cast &quot;WADS_LOADED&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "WADS_LOADED"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Bool, default false.</haxe_doc>
		</WADS_LOADED>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxdoom.enums.data.HXDKeyCode" params="" file="src/hxdoom/enums/data/HXDKeyCode.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<haxe_doc>* @author Kaelan</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.data._HXDKeyCode.HXDKeyCode_Impl_" params="" file="src/hxdoom/enums/data/HXDKeyCode.hx" private="1" module="hxdoom.enums.data.HXDKeyCode" extern="1" final="1">
	<NULL public="1" get="inline" set="null" expr="cast 0x0" line="7" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0x0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NULL>
	<BACKSPACE public="1" get="inline" set="null" expr="cast 0x08" line="8" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0x08</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BACKSPACE>
	<TAB public="1" get="inline" set="null" expr="cast 0x09" line="9" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0x09</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAB>
	<ESCAPE public="1" get="inline" set="null" expr="cast 0x1B" line="10" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0x1B</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ESCAPE>
	<SPACE public="1" get="inline" set="null" expr="cast 0x20" line="11" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0x20</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SPACE>
	<EXCLAMATION public="1" get="inline" set="null" expr="cast 0x21" line="13" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0x21</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXCLAMATION>
	<QUOTE public="1" get="inline" set="null" expr="cast 34" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 34</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</QUOTE>
	<OCTOTHORPE public="1" get="inline" set="null" expr="cast 35" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 35</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OCTOTHORPE>
	<DOLLAR public="1" get="inline" set="null" expr="cast 36" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 36</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DOLLAR>
	<PERCENT public="1" get="inline" set="null" expr="cast 37" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 37</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PERCENT>
	<AMPERSAND public="1" get="inline" set="null" expr="cast 38" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 38</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AMPERSAND>
	<APOSTROPHE public="1" get="inline" set="null" expr="cast 39" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 39</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</APOSTROPHE>
	<OPEN_PARENTHESIS public="1" get="inline" set="null" expr="cast 40" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 40</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN_PARENTHESIS>
	<CLOSE_PARENTHESIS public="1" get="inline" set="null" expr="cast 41" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 41</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSE_PARENTHESIS>
	<ASTERISK public="1" get="inline" set="null" expr="cast 42" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 42</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ASTERISK>
	<PLUS public="1" get="inline" set="null" expr="cast 43" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 43</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PLUS>
	<ACUTE_DIACRITIC public="1" get="inline" set="null" expr="cast 44" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 44</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACUTE_DIACRITIC>
	<HYPHEN public="1" get="inline" set="null" expr="cast 45" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 45</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HYPHEN>
	<PERIOD public="1" get="inline" set="null" expr="cast 46" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 46</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PERIOD>
	<FOWARD_SLASH public="1" get="inline" set="null" expr="cast 47" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 47</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FOWARD_SLASH>
	<ZERO public="1" get="inline" set="null" expr="cast 48" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 48</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZERO>
	<ONE public="1" get="inline" set="null" expr="cast 49" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 49</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ONE>
	<TWO public="1" get="inline" set="null" expr="cast 50" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 50</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TWO>
	<THREE public="1" get="inline" set="null" expr="cast 51" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 51</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</THREE>
	<FOUR public="1" get="inline" set="null" expr="cast 52" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 52</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FOUR>
	<FIVE public="1" get="inline" set="null" expr="cast 53" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 53</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FIVE>
	<SIX public="1" get="inline" set="null" expr="cast 54" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 54</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SIX>
	<SEVEN public="1" get="inline" set="null" expr="cast 55" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 55</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SEVEN>
	<EIGHT public="1" get="inline" set="null" expr="cast 56" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 56</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EIGHT>
	<NINE public="1" get="inline" set="null" expr="cast 57" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 57</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NINE>
	<COLON public="1" get="inline" set="null" expr="cast 58" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 58</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COLON>
	<SEMICOLON public="1" get="inline" set="null" expr="cast 59" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 59</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SEMICOLON>
	<LESSTHAN public="1" get="inline" set="null" expr="cast 60" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 60</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LESSTHAN>
	<EQUALS public="1" get="inline" set="null" expr="cast 61" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 61</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EQUALS>
	<GREATERTHAN public="1" get="inline" set="null" expr="cast 62" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 62</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GREATERTHAN>
	<QUESTION public="1" get="inline" set="null" expr="cast 63" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 63</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</QUESTION>
	<AT public="1" get="inline" set="null" expr="cast 64" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 64</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AT>
	<A_UPPER public="1" get="inline" set="null" expr="cast 65" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 65</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</A_UPPER>
	<B_UPPER public="1" get="inline" set="null" expr="cast 66" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 66</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</B_UPPER>
	<C_UPPER public="1" get="inline" set="null" expr="cast 67" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 67</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</C_UPPER>
	<D_UPPER public="1" get="inline" set="null" expr="cast 68" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 68</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</D_UPPER>
	<E_UPPER public="1" get="inline" set="null" expr="cast 69" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 69</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</E_UPPER>
	<F_UPPER public="1" get="inline" set="null" expr="cast 70" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 70</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F_UPPER>
	<G_UPPER public="1" get="inline" set="null" expr="cast 71" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 71</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</G_UPPER>
	<H_UPPER public="1" get="inline" set="null" expr="cast 72" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 72</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</H_UPPER>
	<I_UPPER public="1" get="inline" set="null" expr="cast 73" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 73</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</I_UPPER>
	<J_UPPER public="1" get="inline" set="null" expr="cast 74" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 74</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</J_UPPER>
	<K_UPPER public="1" get="inline" set="null" expr="cast 75" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 75</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</K_UPPER>
	<L_UPPER public="1" get="inline" set="null" expr="cast 76" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 76</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</L_UPPER>
	<M_UPPER public="1" get="inline" set="null" expr="cast 77" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 77</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</M_UPPER>
	<N_UPPER public="1" get="inline" set="null" expr="cast 78" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 78</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</N_UPPER>
	<O_UPPER public="1" get="inline" set="null" expr="cast 79" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 79</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</O_UPPER>
	<P_UPPER public="1" get="inline" set="null" expr="cast 80" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 80</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P_UPPER>
	<Q_UPPER public="1" get="inline" set="null" expr="cast 81" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 81</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Q_UPPER>
	<R_UPPER public="1" get="inline" set="null" expr="cast 82" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 82</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</R_UPPER>
	<S_UPPER public="1" get="inline" set="null" expr="cast 83" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 83</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</S_UPPER>
	<T_UPPER public="1" get="inline" set="null" expr="cast 84" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 84</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</T_UPPER>
	<U_UPPER public="1" get="inline" set="null" expr="cast 85" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 85</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</U_UPPER>
	<V_UPPER public="1" get="inline" set="null" expr="cast 86" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 86</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</V_UPPER>
	<W_UPPER public="1" get="inline" set="null" expr="cast 87" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 87</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</W_UPPER>
	<X_UPPER public="1" get="inline" set="null" expr="cast 88" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 88</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X_UPPER>
	<Y_UPPER public="1" get="inline" set="null" expr="cast 89" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 89</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Y_UPPER>
	<Z_UPPER public="1" get="inline" set="null" expr="cast 90" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 90</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Z_UPPER>
	<OPEN_BRACKET public="1" get="inline" set="null" expr="cast 91" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 91</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN_BRACKET>
	<BACK_SLASH public="1" get="inline" set="null" expr="cast 92" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 92</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BACK_SLASH>
	<CLOSE_BRACKET public="1" get="inline" set="null" expr="cast 93" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 93</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSE_BRACKET>
	<CARET public="1" get="inline" set="null" expr="cast 94" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 94</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CARET>
	<UNDERSCORE public="1" get="inline" set="null" expr="cast 95" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 95</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UNDERSCORE>
	<GRAVE_DIACRITIC public="1" get="inline" set="null" expr="cast 96" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 96</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRAVE_DIACRITIC>
	<A_LOWER public="1" get="inline" set="null" expr="cast 97" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 97</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</A_LOWER>
	<B_LOWER public="1" get="inline" set="null" expr="cast 98" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 98</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</B_LOWER>
	<C_LOWER public="1" get="inline" set="null" expr="cast 99" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 99</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</C_LOWER>
	<D_LOWER public="1" get="inline" set="null" expr="cast 100" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</D_LOWER>
	<E_LOWER public="1" get="inline" set="null" expr="cast 101" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</E_LOWER>
	<F_LOWER public="1" get="inline" set="null" expr="cast 102" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F_LOWER>
	<G_LOWER public="1" get="inline" set="null" expr="cast 103" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 103</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</G_LOWER>
	<H_LOWER public="1" get="inline" set="null" expr="cast 104" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 104</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</H_LOWER>
	<I_LOWER public="1" get="inline" set="null" expr="cast 105" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 105</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</I_LOWER>
	<J_LOWER public="1" get="inline" set="null" expr="cast 106" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 106</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</J_LOWER>
	<K_LOWER public="1" get="inline" set="null" expr="cast 107" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 107</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</K_LOWER>
	<L_LOWER public="1" get="inline" set="null" expr="cast 108" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 108</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</L_LOWER>
	<M_LOWER public="1" get="inline" set="null" expr="cast 109" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 109</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</M_LOWER>
	<N_LOWER public="1" get="inline" set="null" expr="cast 110" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 110</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</N_LOWER>
	<O_LOWER public="1" get="inline" set="null" expr="cast 111" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 111</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</O_LOWER>
	<P_LOWER public="1" get="inline" set="null" expr="cast 112" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 112</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P_LOWER>
	<Q_LOWER public="1" get="inline" set="null" expr="cast 113" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 113</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Q_LOWER>
	<R_LOWER public="1" get="inline" set="null" expr="cast 114" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 114</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</R_LOWER>
	<S_LOWER public="1" get="inline" set="null" expr="cast 115" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 115</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</S_LOWER>
	<T_LOWER public="1" get="inline" set="null" expr="cast 116" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 116</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</T_LOWER>
	<U_LOWER public="1" get="inline" set="null" expr="cast 117" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 117</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</U_LOWER>
	<V_LOWER public="1" get="inline" set="null" expr="cast 118" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 118</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</V_LOWER>
	<W_LOWER public="1" get="inline" set="null" expr="cast 119" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 119</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</W_LOWER>
	<X_LOWER public="1" get="inline" set="null" expr="cast 120" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 120</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X_LOWER>
	<Y_LOWER public="1" get="inline" set="null" expr="cast 121" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 121</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Y_LOWER>
	<Z_LOWER public="1" get="inline" set="null" expr="cast 122" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 122</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Z_LOWER>
	<OPEN_BRACE public="1" get="inline" set="null" expr="cast 123" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 123</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN_BRACE>
	<PIPE public="1" get="inline" set="null" expr="cast 124" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 124</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PIPE>
	<CLOSE_BRACE public="1" get="inline" set="null" expr="cast 125" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 125</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSE_BRACE>
	<TILDE public="1" get="inline" set="null" expr="cast 126" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 126</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TILDE>
	<DEL public="1" get="inline" set="null" expr="cast 127" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 127</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEL>
	<DOWN_ARROW public="1" get="inline" set="null" expr="cast 1073741905" line="109" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 1073741905</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DOWN_ARROW>
	<UP_ARROW public="1" get="inline" set="null" expr="cast 1073741906" line="110" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 1073741906</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UP_ARROW>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.data._HXDKeyCode.HXDKeyCode_Impl_" params="" file="src/hxdoom/enums/data/HXDKeyCode.hx" private="1" module="hxdoom.enums.data.HXDKeyCode" extern="1" final="1">
		<NULL public="1" get="inline" set="null" expr="cast 0x0" line="7" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0x0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NULL>
		<BACKSPACE public="1" get="inline" set="null" expr="cast 0x08" line="8" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0x08</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BACKSPACE>
		<TAB public="1" get="inline" set="null" expr="cast 0x09" line="9" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0x09</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAB>
		<ESCAPE public="1" get="inline" set="null" expr="cast 0x1B" line="10" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0x1B</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ESCAPE>
		<SPACE public="1" get="inline" set="null" expr="cast 0x20" line="11" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0x20</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SPACE>
		<EXCLAMATION public="1" get="inline" set="null" expr="cast 0x21" line="13" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0x21</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXCLAMATION>
		<QUOTE public="1" get="inline" set="null" expr="cast 34" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 34</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</QUOTE>
		<OCTOTHORPE public="1" get="inline" set="null" expr="cast 35" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 35</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OCTOTHORPE>
		<DOLLAR public="1" get="inline" set="null" expr="cast 36" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 36</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DOLLAR>
		<PERCENT public="1" get="inline" set="null" expr="cast 37" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 37</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PERCENT>
		<AMPERSAND public="1" get="inline" set="null" expr="cast 38" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 38</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AMPERSAND>
		<APOSTROPHE public="1" get="inline" set="null" expr="cast 39" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 39</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</APOSTROPHE>
		<OPEN_PARENTHESIS public="1" get="inline" set="null" expr="cast 40" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 40</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN_PARENTHESIS>
		<CLOSE_PARENTHESIS public="1" get="inline" set="null" expr="cast 41" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 41</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSE_PARENTHESIS>
		<ASTERISK public="1" get="inline" set="null" expr="cast 42" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 42</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ASTERISK>
		<PLUS public="1" get="inline" set="null" expr="cast 43" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 43</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PLUS>
		<ACUTE_DIACRITIC public="1" get="inline" set="null" expr="cast 44" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 44</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACUTE_DIACRITIC>
		<HYPHEN public="1" get="inline" set="null" expr="cast 45" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 45</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HYPHEN>
		<PERIOD public="1" get="inline" set="null" expr="cast 46" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 46</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PERIOD>
		<FOWARD_SLASH public="1" get="inline" set="null" expr="cast 47" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 47</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FOWARD_SLASH>
		<ZERO public="1" get="inline" set="null" expr="cast 48" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 48</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="cast 49" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 49</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ONE>
		<TWO public="1" get="inline" set="null" expr="cast 50" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 50</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TWO>
		<THREE public="1" get="inline" set="null" expr="cast 51" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 51</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</THREE>
		<FOUR public="1" get="inline" set="null" expr="cast 52" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 52</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FOUR>
		<FIVE public="1" get="inline" set="null" expr="cast 53" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 53</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FIVE>
		<SIX public="1" get="inline" set="null" expr="cast 54" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 54</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SIX>
		<SEVEN public="1" get="inline" set="null" expr="cast 55" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 55</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SEVEN>
		<EIGHT public="1" get="inline" set="null" expr="cast 56" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 56</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EIGHT>
		<NINE public="1" get="inline" set="null" expr="cast 57" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 57</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NINE>
		<COLON public="1" get="inline" set="null" expr="cast 58" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 58</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COLON>
		<SEMICOLON public="1" get="inline" set="null" expr="cast 59" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 59</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SEMICOLON>
		<LESSTHAN public="1" get="inline" set="null" expr="cast 60" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 60</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LESSTHAN>
		<EQUALS public="1" get="inline" set="null" expr="cast 61" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 61</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EQUALS>
		<GREATERTHAN public="1" get="inline" set="null" expr="cast 62" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 62</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GREATERTHAN>
		<QUESTION public="1" get="inline" set="null" expr="cast 63" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 63</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</QUESTION>
		<AT public="1" get="inline" set="null" expr="cast 64" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 64</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AT>
		<A_UPPER public="1" get="inline" set="null" expr="cast 65" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 65</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</A_UPPER>
		<B_UPPER public="1" get="inline" set="null" expr="cast 66" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 66</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</B_UPPER>
		<C_UPPER public="1" get="inline" set="null" expr="cast 67" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 67</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</C_UPPER>
		<D_UPPER public="1" get="inline" set="null" expr="cast 68" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 68</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</D_UPPER>
		<E_UPPER public="1" get="inline" set="null" expr="cast 69" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 69</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</E_UPPER>
		<F_UPPER public="1" get="inline" set="null" expr="cast 70" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 70</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F_UPPER>
		<G_UPPER public="1" get="inline" set="null" expr="cast 71" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 71</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</G_UPPER>
		<H_UPPER public="1" get="inline" set="null" expr="cast 72" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 72</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</H_UPPER>
		<I_UPPER public="1" get="inline" set="null" expr="cast 73" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 73</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</I_UPPER>
		<J_UPPER public="1" get="inline" set="null" expr="cast 74" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 74</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</J_UPPER>
		<K_UPPER public="1" get="inline" set="null" expr="cast 75" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 75</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</K_UPPER>
		<L_UPPER public="1" get="inline" set="null" expr="cast 76" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 76</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</L_UPPER>
		<M_UPPER public="1" get="inline" set="null" expr="cast 77" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 77</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</M_UPPER>
		<N_UPPER public="1" get="inline" set="null" expr="cast 78" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 78</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</N_UPPER>
		<O_UPPER public="1" get="inline" set="null" expr="cast 79" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 79</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</O_UPPER>
		<P_UPPER public="1" get="inline" set="null" expr="cast 80" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 80</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P_UPPER>
		<Q_UPPER public="1" get="inline" set="null" expr="cast 81" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 81</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Q_UPPER>
		<R_UPPER public="1" get="inline" set="null" expr="cast 82" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 82</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</R_UPPER>
		<S_UPPER public="1" get="inline" set="null" expr="cast 83" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 83</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</S_UPPER>
		<T_UPPER public="1" get="inline" set="null" expr="cast 84" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 84</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</T_UPPER>
		<U_UPPER public="1" get="inline" set="null" expr="cast 85" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 85</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</U_UPPER>
		<V_UPPER public="1" get="inline" set="null" expr="cast 86" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 86</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</V_UPPER>
		<W_UPPER public="1" get="inline" set="null" expr="cast 87" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 87</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</W_UPPER>
		<X_UPPER public="1" get="inline" set="null" expr="cast 88" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 88</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X_UPPER>
		<Y_UPPER public="1" get="inline" set="null" expr="cast 89" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 89</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Y_UPPER>
		<Z_UPPER public="1" get="inline" set="null" expr="cast 90" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 90</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Z_UPPER>
		<OPEN_BRACKET public="1" get="inline" set="null" expr="cast 91" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 91</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN_BRACKET>
		<BACK_SLASH public="1" get="inline" set="null" expr="cast 92" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 92</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BACK_SLASH>
		<CLOSE_BRACKET public="1" get="inline" set="null" expr="cast 93" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 93</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSE_BRACKET>
		<CARET public="1" get="inline" set="null" expr="cast 94" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 94</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CARET>
		<UNDERSCORE public="1" get="inline" set="null" expr="cast 95" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 95</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UNDERSCORE>
		<GRAVE_DIACRITIC public="1" get="inline" set="null" expr="cast 96" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 96</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRAVE_DIACRITIC>
		<A_LOWER public="1" get="inline" set="null" expr="cast 97" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 97</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</A_LOWER>
		<B_LOWER public="1" get="inline" set="null" expr="cast 98" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 98</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</B_LOWER>
		<C_LOWER public="1" get="inline" set="null" expr="cast 99" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 99</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</C_LOWER>
		<D_LOWER public="1" get="inline" set="null" expr="cast 100" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</D_LOWER>
		<E_LOWER public="1" get="inline" set="null" expr="cast 101" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</E_LOWER>
		<F_LOWER public="1" get="inline" set="null" expr="cast 102" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F_LOWER>
		<G_LOWER public="1" get="inline" set="null" expr="cast 103" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 103</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</G_LOWER>
		<H_LOWER public="1" get="inline" set="null" expr="cast 104" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 104</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</H_LOWER>
		<I_LOWER public="1" get="inline" set="null" expr="cast 105" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 105</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</I_LOWER>
		<J_LOWER public="1" get="inline" set="null" expr="cast 106" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 106</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</J_LOWER>
		<K_LOWER public="1" get="inline" set="null" expr="cast 107" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 107</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</K_LOWER>
		<L_LOWER public="1" get="inline" set="null" expr="cast 108" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 108</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</L_LOWER>
		<M_LOWER public="1" get="inline" set="null" expr="cast 109" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 109</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</M_LOWER>
		<N_LOWER public="1" get="inline" set="null" expr="cast 110" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 110</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</N_LOWER>
		<O_LOWER public="1" get="inline" set="null" expr="cast 111" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 111</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</O_LOWER>
		<P_LOWER public="1" get="inline" set="null" expr="cast 112" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 112</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P_LOWER>
		<Q_LOWER public="1" get="inline" set="null" expr="cast 113" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 113</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Q_LOWER>
		<R_LOWER public="1" get="inline" set="null" expr="cast 114" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 114</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</R_LOWER>
		<S_LOWER public="1" get="inline" set="null" expr="cast 115" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 115</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</S_LOWER>
		<T_LOWER public="1" get="inline" set="null" expr="cast 116" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 116</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</T_LOWER>
		<U_LOWER public="1" get="inline" set="null" expr="cast 117" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 117</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</U_LOWER>
		<V_LOWER public="1" get="inline" set="null" expr="cast 118" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 118</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</V_LOWER>
		<W_LOWER public="1" get="inline" set="null" expr="cast 119" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 119</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</W_LOWER>
		<X_LOWER public="1" get="inline" set="null" expr="cast 120" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 120</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X_LOWER>
		<Y_LOWER public="1" get="inline" set="null" expr="cast 121" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 121</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Y_LOWER>
		<Z_LOWER public="1" get="inline" set="null" expr="cast 122" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 122</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Z_LOWER>
		<OPEN_BRACE public="1" get="inline" set="null" expr="cast 123" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 123</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN_BRACE>
		<PIPE public="1" get="inline" set="null" expr="cast 124" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 124</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PIPE>
		<CLOSE_BRACE public="1" get="inline" set="null" expr="cast 125" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 125</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSE_BRACE>
		<TILDE public="1" get="inline" set="null" expr="cast 126" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 126</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TILDE>
		<DEL public="1" get="inline" set="null" expr="cast 127" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 127</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEL>
		<DOWN_ARROW public="1" get="inline" set="null" expr="cast 1073741905" line="109" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 1073741905</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DOWN_ARROW>
		<UP_ARROW public="1" get="inline" set="null" expr="cast 1073741906" line="110" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 1073741906</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UP_ARROW>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxdoom.enums.eng.ColorChannel" params="" file="src/hxdoom/enums/eng/ColorChannel.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<haxe_doc>* @author Kaelan</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.eng._ColorChannel.ColorChannel_Impl_" params="" file="src/hxdoom/enums/eng/ColorChannel.hx" private="1" module="hxdoom.enums.eng.ColorChannel" extern="1" final="1">
	<RED public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RED>
	<GREEN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GREEN>
	<BLUE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLUE>
	<ALPHA public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALPHA>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.eng._ColorChannel.ColorChannel_Impl_" params="" file="src/hxdoom/enums/eng/ColorChannel.hx" private="1" module="hxdoom.enums.eng.ColorChannel" extern="1" final="1">
		<RED public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RED>
		<GREEN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GREEN>
		<BLUE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLUE>
		<ALPHA public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALPHA>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxdoom.enums.eng.ColorMode" params="" file="src/hxdoom/enums/eng/ColorMode.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<haxe_doc>* @author Kaelan</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.eng._ColorMode.ColorMode_Impl_" params="" file="src/hxdoom/enums/eng/ColorMode.hx" private="1" module="hxdoom.enums.eng.ColorMode" extern="1" final="1">
	<RGB public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGB>
	<ARGB public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARGB>
	<RGBA public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGBA>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.eng._ColorMode.ColorMode_Impl_" params="" file="src/hxdoom/enums/eng/ColorMode.hx" private="1" module="hxdoom.enums.eng.ColorMode" extern="1" final="1">
		<RGB public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGB>
		<ARGB public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARGB>
		<RGBA public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGBA>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxdoom.enums.eng.DataLump" params="" file="src/hxdoom/enums/eng/DataLump.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<haxe_doc>* Lumps whos name does not directly indicate their intended purpose.
 * @author Kaelan</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.eng._DataLump.DataLump_Impl_" params="" file="src/hxdoom/enums/eng/DataLump.hx" private="1" module="hxdoom.enums.eng.DataLump" extern="1" final="1">
	<GRAPHIC public="1" get="inline" set="null" expr="cast &quot;GRAPHIC&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "GRAPHIC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRAPHIC>
	<SOUNDFX public="1" get="inline" set="null" expr="cast &quot;SOUNDFX&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SOUNDFX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOUNDFX>
	<SOUNDPC public="1" get="inline" set="null" expr="cast &quot;SOUNDPC&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SOUNDPC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOUNDPC>
	<MIDIMUS public="1" get="inline" set="null" expr="cast &quot;MIDIMUS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "MIDIMUS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MIDIMUS>
	<UNKNOWN public="1" get="inline" set="null" expr="cast &quot;UNKNOWN&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "UNKNOWN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UNKNOWN>
	<MARKER public="1" get="inline" set="null" expr="cast &quot;MARKER&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "MARKER"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MARKER>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.eng._DataLump.DataLump_Impl_" params="" file="src/hxdoom/enums/eng/DataLump.hx" private="1" module="hxdoom.enums.eng.DataLump" extern="1" final="1">
		<GRAPHIC public="1" get="inline" set="null" expr="cast &quot;GRAPHIC&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "GRAPHIC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRAPHIC>
		<SOUNDFX public="1" get="inline" set="null" expr="cast &quot;SOUNDFX&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SOUNDFX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOUNDFX>
		<SOUNDPC public="1" get="inline" set="null" expr="cast &quot;SOUNDPC&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SOUNDPC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOUNDPC>
		<MIDIMUS public="1" get="inline" set="null" expr="cast &quot;MIDIMUS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "MIDIMUS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MIDIMUS>
		<UNKNOWN public="1" get="inline" set="null" expr="cast &quot;UNKNOWN&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "UNKNOWN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UNKNOWN>
		<MARKER public="1" get="inline" set="null" expr="cast &quot;MARKER&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "MARKER"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MARKER>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxdoom.enums.eng.CardInt" params="" file="src/hxdoom/enums/eng/Direction.hx" module="hxdoom.enums.eng.Direction">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* Describe values of the needed cardinal directions to describe sprite directions. One provided as integers, and one provided as strings.
 * @author Kaelan</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.eng._Direction.CardInt_Impl_" params="" file="src/hxdoom/enums/eng/Direction.hx" private="1" module="hxdoom.enums.eng.Direction" extern="1" final="1">
	<EAST public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EAST>
	<NORTHEAST public="1" get="inline" set="null" expr="cast 45" line="10" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 45</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORTHEAST>
	<NORTH public="1" get="inline" set="null" expr="cast 90" line="11" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 90</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORTH>
	<NORTHWEST public="1" get="inline" set="null" expr="cast 135" line="12" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 135</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORTHWEST>
	<WEST public="1" get="inline" set="null" expr="cast 180" line="13" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 180</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEST>
	<SOUTHWEST public="1" get="inline" set="null" expr="cast 225" line="14" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 225</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOUTHWEST>
	<SOUTH public="1" get="inline" set="null" expr="cast 270" line="15" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 270</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOUTH>
	<SOUTHEAST public="1" get="inline" set="null" expr="cast 315" line="16" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 315</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOUTHEAST>
	<EAST2 public="1" get="inline" set="null" expr="cast 360" line="18" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 360</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EAST2>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.eng._Direction.CardInt_Impl_" params="" file="src/hxdoom/enums/eng/Direction.hx" private="1" module="hxdoom.enums.eng.Direction" extern="1" final="1">
		<EAST public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EAST>
		<NORTHEAST public="1" get="inline" set="null" expr="cast 45" line="10" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 45</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORTHEAST>
		<NORTH public="1" get="inline" set="null" expr="cast 90" line="11" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 90</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORTH>
		<NORTHWEST public="1" get="inline" set="null" expr="cast 135" line="12" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 135</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORTHWEST>
		<WEST public="1" get="inline" set="null" expr="cast 180" line="13" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 180</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEST>
		<SOUTHWEST public="1" get="inline" set="null" expr="cast 225" line="14" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 225</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOUTHWEST>
		<SOUTH public="1" get="inline" set="null" expr="cast 270" line="15" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 270</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOUTH>
		<SOUTHEAST public="1" get="inline" set="null" expr="cast 315" line="16" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 315</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOUTHEAST>
		<EAST2 public="1" get="inline" set="null" expr="cast 360" line="18" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 360</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EAST2>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxdoom.enums.eng.CardString" params="" file="src/hxdoom/enums/eng/Direction.hx" module="hxdoom.enums.eng.Direction">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.eng._Direction.CardString_Impl_" params="" file="src/hxdoom/enums/eng/Direction.hx" private="1" module="hxdoom.enums.eng.Direction" extern="1" final="1">
	<EAST public="1" get="inline" set="null" expr="cast &quot;EAST&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "EAST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EAST>
	<NORTHEAST public="1" get="inline" set="null" expr="cast &quot;NORTHEAST&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "NORTHEAST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORTHEAST>
	<NORTH public="1" get="inline" set="null" expr="cast &quot;NORTH&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "NORTH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORTH>
	<NORTHWEST public="1" get="inline" set="null" expr="cast &quot;NORTHWEST&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "NORTHWEST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORTHWEST>
	<WEST public="1" get="inline" set="null" expr="cast &quot;WEST&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "WEST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEST>
	<SOUTHWEST public="1" get="inline" set="null" expr="cast &quot;SOUTHWEST&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SOUTHWEST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOUTHWEST>
	<SOUTH public="1" get="inline" set="null" expr="cast &quot;SOUTH&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SOUTH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOUTH>
	<SOUTHEAST public="1" get="inline" set="null" expr="cast &quot;SOUTHEAST&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SOUTHEAST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOUTHEAST>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.eng._Direction.CardString_Impl_" params="" file="src/hxdoom/enums/eng/Direction.hx" private="1" module="hxdoom.enums.eng.Direction" extern="1" final="1">
		<EAST public="1" get="inline" set="null" expr="cast &quot;EAST&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "EAST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EAST>
		<NORTHEAST public="1" get="inline" set="null" expr="cast &quot;NORTHEAST&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "NORTHEAST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORTHEAST>
		<NORTH public="1" get="inline" set="null" expr="cast &quot;NORTH&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "NORTH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORTH>
		<NORTHWEST public="1" get="inline" set="null" expr="cast &quot;NORTHWEST&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "NORTHWEST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORTHWEST>
		<WEST public="1" get="inline" set="null" expr="cast &quot;WEST&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "WEST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEST>
		<SOUTHWEST public="1" get="inline" set="null" expr="cast &quot;SOUTHWEST&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SOUTHWEST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOUTHWEST>
		<SOUTH public="1" get="inline" set="null" expr="cast &quot;SOUTH&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SOUTH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOUTH>
		<SOUTHEAST public="1" get="inline" set="null" expr="cast &quot;SOUTHEAST&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SOUTHEAST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOUTHEAST>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxdoom.enums.eng.KeyLump" params="" file="src/hxdoom/enums/eng/KeyLump.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>* @author Kaelan
 * 
 * Key Lumps are lumps that posses namespaces that easily point to their intended behavior.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.eng._KeyLump.KeyLump_Impl_" params="" file="src/hxdoom/enums/eng/KeyLump.hx" private="1" module="hxdoom.enums.eng.KeyLump" extern="1" final="1">
	<BLOCKMAP public="1" get="inline" set="null" expr="cast &quot;BLOCKMAP&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "BLOCKMAP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLOCKMAP>
	<LINEDEFS public="1" get="inline" set="null" expr="cast &quot;LINEDEFS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "LINEDEFS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINEDEFS>
	<NODES public="1" get="inline" set="null" expr="cast &quot;NODES&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "NODES"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NODES>
	<PLAYPAL public="1" get="inline" set="null" expr="cast &quot;PLAYPAL&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "PLAYPAL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PLAYPAL>
	<REJECT public="1" get="inline" set="null" expr="cast &quot;REJECT&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "REJECT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REJECT>
	<SEGS public="1" get="inline" set="null" expr="cast &quot;SEGS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SEGS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SEGS>
	<SIDEDEFS public="1" get="inline" set="null" expr="cast &quot;SIDEDEFS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SIDEDEFS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SIDEDEFS>
	<SECTORS public="1" get="inline" set="null" expr="cast &quot;SECTORS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SECTORS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SECTORS>
	<SSECTORS public="1" get="inline" set="null" expr="cast &quot;SSECTORS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "SSECTORS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SSECTORS>
	<THINGS public="1" get="inline" set="null" expr="cast &quot;THINGS&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "THINGS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</THINGS>
	<VERTEXES public="1" get="inline" set="null" expr="cast &quot;VERTEXES&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "VERTEXES"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VERTEXES>
	<P_START public="1" get="inline" set="null" expr="cast &quot;P_START&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "P_START"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P_START>
	<P1_START public="1" get="inline" set="null" expr="cast &quot;P1_START&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "P1_START"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P1_START>
	<P1_END public="1" get="inline" set="null" expr="cast &quot;P1_END&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "P1_END"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P1_END>
	<P2_START public="1" get="inline" set="null" expr="cast &quot;P2_START&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "P2_START"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P2_START>
	<P2_END public="1" get="inline" set="null" expr="cast &quot;P2_END&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "P2_END"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P2_END>
	<P_END public="1" get="inline" set="null" expr="cast &quot;P_END&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "P_END"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P_END>
	<F_START public="1" get="inline" set="null" expr="cast &quot;F_START&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "F_START"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F_START>
	<F1_START public="1" get="inline" set="null" expr="cast &quot;F1_START&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "F1_START"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F1_START>
	<F1_END public="1" get="inline" set="null" expr="cast &quot;F1_END&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "F1_END"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F1_END>
	<F2_START public="1" get="inline" set="null" expr="cast &quot;F2_START&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "F2_START"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F2_START>
	<F2_END public="1" get="inline" set="null" expr="cast &quot;F2_END&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "F2_END"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F2_END>
	<F_END public="1" get="inline" set="null" expr="cast &quot;F_END&quot;" line="1" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "F_END"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F_END>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.eng._KeyLump.KeyLump_Impl_" params="" file="src/hxdoom/enums/eng/KeyLump.hx" private="1" module="hxdoom.enums.eng.KeyLump" extern="1" final="1">
		<BLOCKMAP public="1" get="inline" set="null" expr="cast &quot;BLOCKMAP&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "BLOCKMAP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLOCKMAP>
		<LINEDEFS public="1" get="inline" set="null" expr="cast &quot;LINEDEFS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "LINEDEFS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINEDEFS>
		<NODES public="1" get="inline" set="null" expr="cast &quot;NODES&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "NODES"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NODES>
		<PLAYPAL public="1" get="inline" set="null" expr="cast &quot;PLAYPAL&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "PLAYPAL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PLAYPAL>
		<REJECT public="1" get="inline" set="null" expr="cast &quot;REJECT&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "REJECT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REJECT>
		<SEGS public="1" get="inline" set="null" expr="cast &quot;SEGS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SEGS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SEGS>
		<SIDEDEFS public="1" get="inline" set="null" expr="cast &quot;SIDEDEFS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SIDEDEFS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SIDEDEFS>
		<SECTORS public="1" get="inline" set="null" expr="cast &quot;SECTORS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SECTORS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SECTORS>
		<SSECTORS public="1" get="inline" set="null" expr="cast &quot;SSECTORS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "SSECTORS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SSECTORS>
		<THINGS public="1" get="inline" set="null" expr="cast &quot;THINGS&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "THINGS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</THINGS>
		<VERTEXES public="1" get="inline" set="null" expr="cast &quot;VERTEXES&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "VERTEXES"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VERTEXES>
		<P_START public="1" get="inline" set="null" expr="cast &quot;P_START&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "P_START"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P_START>
		<P1_START public="1" get="inline" set="null" expr="cast &quot;P1_START&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "P1_START"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P1_START>
		<P1_END public="1" get="inline" set="null" expr="cast &quot;P1_END&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "P1_END"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P1_END>
		<P2_START public="1" get="inline" set="null" expr="cast &quot;P2_START&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "P2_START"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P2_START>
		<P2_END public="1" get="inline" set="null" expr="cast &quot;P2_END&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "P2_END"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P2_END>
		<P_END public="1" get="inline" set="null" expr="cast &quot;P_END&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "P_END"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P_END>
		<F_START public="1" get="inline" set="null" expr="cast &quot;F_START&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "F_START"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F_START>
		<F1_START public="1" get="inline" set="null" expr="cast &quot;F1_START&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "F1_START"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F1_START>
		<F1_END public="1" get="inline" set="null" expr="cast &quot;F1_END&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "F1_END"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F1_END>
		<F2_START public="1" get="inline" set="null" expr="cast &quot;F2_START&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "F2_START"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F2_START>
		<F2_END public="1" get="inline" set="null" expr="cast &quot;F2_END&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "F2_END"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F2_END>
		<F_END public="1" get="inline" set="null" expr="cast &quot;F_END&quot;" line="1" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "F_END"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F_END>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="hxdoom.enums.eng.SideType" params="" file="src/hxdoom/enums/eng/SideType.hx">
		<FRONT_TOP/>
		<FRONT_BOTTOM/>
		<FRONT_MIDDLE/>
		<BACK_TOP/>
		<BACK_BOTTOM/>
		<BACK_MIDDLE/>
		<SOLID/>
		<haxe_doc>* @author Kaelan</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<abstract path="hxdoom.enums.eng.WadDirectory" params="" file="src/hxdoom/enums/eng/WadDirectory.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<haxe_doc>* @author Kaelan</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.eng._WadDirectory.WadDirectory_Impl_" params="" file="src/hxdoom/enums/eng/WadDirectory.hx" private="1" module="hxdoom.enums.eng.WadDirectory" extern="1" final="1">
	<windows public="1" get="inline" set="null" expr="cast &quot;C:/DOOM/WADS&quot;" line="8" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "C:/DOOM/WADS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</windows>
	<linux public="1" get="inline" set="null" expr="cast &quot;~/usr/local/share/games/DOOM/WADS&quot;" line="9" static="1">
		<c path="String"/>
		<meta>
			<m n=":value"><e>cast "~/usr/local/share/games/DOOM/WADS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</linux>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.eng._WadDirectory.WadDirectory_Impl_" params="" file="src/hxdoom/enums/eng/WadDirectory.hx" private="1" module="hxdoom.enums.eng.WadDirectory" extern="1" final="1">
		<windows public="1" get="inline" set="null" expr="cast &quot;C:/DOOM/WADS&quot;" line="8" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "C:/DOOM/WADS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</windows>
		<linux public="1" get="inline" set="null" expr="cast &quot;~/usr/local/share/games/DOOM/WADS&quot;" line="9" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>cast "~/usr/local/share/games/DOOM/WADS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</linux>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxdoom.enums.game.SharedID" params="" file="src/hxdoom/enums/game/SharedID.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<haxe_doc>* @author Kaelan</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxdoom.enums.game._SharedID.SharedID_Impl_" params="" file="src/hxdoom/enums/game/SharedID.hx" private="1" module="hxdoom.enums.game.SharedID" extern="1" final="1">
	<PLAYER_1 public="1" get="inline" set="null" expr="cast 1" line="8" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PLAYER_1>
	<PLAYER_2 public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PLAYER_2>
	<PLAYER_3 public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PLAYER_3>
	<PLAYER_4 public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="Int"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PLAYER_4>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxdoom.enums.game._SharedID.SharedID_Impl_" params="" file="src/hxdoom/enums/game/SharedID.hx" private="1" module="hxdoom.enums.game.SharedID" extern="1" final="1">
		<PLAYER_1 public="1" get="inline" set="null" expr="cast 1" line="8" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PLAYER_1>
		<PLAYER_2 public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PLAYER_2>
		<PLAYER_3 public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PLAYER_3>
		<PLAYER_4 public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PLAYER_4>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="hxdoom.lumps.Directory" params="" file="src/hxdoom/lumps/Directory.hx">
		<CONSTRUCTOR public="1" expr="Directory.new" line="10" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.Directory"/>
			</f>
			<meta><m n=":value"><e>Directory.new</e></m></meta>
		</CONSTRUCTOR>
		<dataOffset public="1"><x path="Int"/></dataOffset>
		<size public="1"><x path="Int"/></size>
		<name public="1"><c path="String"/></name>
		<wad public="1"><c path="String"/></wad>
		<index public="1"><x path="Int"/></index>
		<toString public="1" set="method" line="26"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="17"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.LumpBase" params="" file="src/hxdoom/lumps/LumpBase.hx">
		<toDataBytes public="1" set="method" line="17"><f a=""><x path="Void"/></f></toDataBytes>
		<toStringBytes public="1" set="method" line="21"><f a=""><x path="Void"/></f></toStringBytes>
		<toJSON public="1" set="method" line="25"><f a=""><x path="Void"/></f></toJSON>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
	</class>
	<class path="hxdoom.lumps.audio.Music" params="" file="src/hxdoom/lumps/audio/Music.hx">
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
	</class>
	<class path="hxdoom.lumps.graphic.Patch" params="" file="src/hxdoom/lumps/graphic/Patch.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="Patch.new" line="13" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.graphic.Patch"/>
			</f>
			<meta><m n=":value"><e>Patch.new</e></m></meta>
		</CONSTRUCTOR>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<offset_x public="1"><x path="Int"/></offset_x>
		<offset_y public="1"><x path="Int"/></offset_y>
		<pixels public="1"><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Int"/></x></x></pixels>
		<toString public="1" set="method" line="31"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="20"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.graphic.PatchNames" params="" file="src/hxdoom/lumps/graphic/PatchNames.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="PatchNames.new" line="10" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.graphic.PatchNames"/>
			</f>
			<meta><m n=":value"><e>PatchNames.new</e></m></meta>
		</CONSTRUCTOR>
		<names public="1"><c path="Array"><c path="String"/></c></names>
		<addPatchName public="1" set="method" line="20"><f a="_name">
	<c path="String"/>
	<x path="Void"/>
</f></addPatchName>
		<checkPatch public="1" set="method" line="23"><f a="_name">
	<c path="String"/>
	<x path="Bool"/>
</f></checkPatch>
		<getPatchName public="1" set="method" line="27"><f a="_index">
	<x path="Int"/>
	<c path="String"/>
</f></getPatchName>
		<toString public="1" set="method" line="30"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="14"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.graphic.Playpal" params="" file="src/hxdoom/lumps/graphic/Playpal.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="Playpal.new" line="19" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.graphic.Playpal"/>
			</f>
			<meta><m n=":value"><e>Playpal.new</e></m></meta>
		</CONSTRUCTOR>
		<palettes public="1"><c path="Array"><c path="Array"><x path="Int"/></c></c></palettes>
		<addSwatch public="1" set="method" line="28"><f a="_index:_color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addSwatch>
		<getColorChannelFloat public="1" set="method" line="32">
			<f a="_index:_channel:?_pal" v="::0">
				<x path="Int"/>
				<x path="hxdoom.enums.eng.ColorChannel"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ _pal : 0 }</e></m></meta>
		</getColorChannelFloat>
		<getColorChannelInt public="1" set="method" line="35">
			<f a="_index:_channel:?_pal" v="::0">
				<x path="Int"/>
				<x path="hxdoom.enums.eng.ColorChannel"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ _pal : 0 }</e></m></meta>
		</getColorChannelInt>
		<getColorHex public="1" set="method" line="53">
			<f a="_index:_mode:?_pal" v="::0">
				<x path="Int"/>
				<x path="hxdoom.enums.eng.ColorMode"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ _pal : 0 }</e></m></meta>
		</getColorHex>
		<toString public="1" set="method" line="66"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="22"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.graphic.TextureInfo" params="" file="src/hxdoom/lumps/graphic/TextureInfo.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="TextureInfo.new" line="14" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.graphic.TextureInfo"/>
			</f>
			<meta><m n=":value"><e>TextureInfo.new</e></m></meta>
		</CONSTRUCTOR>
		<num_textures public="1"><x path="Int"/></num_textures>
		<offsets public="1"><c path="Array"><x path="Int"/></c></offsets>
		<textures public="1"><t path="Map">
	<c path="String"/>
	<t path="hxdoom.lumps.graphic.TextureData"/>
</t></textures>
		<addTextureData public="1" set="method" line="30"><f a="_texture">
	<t path="hxdoom.lumps.graphic.TextureData"/>
	<x path="Void"/>
</f></addTextureData>
		<toString public="1" set="method" line="34"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="20"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan
 * 
 * Not to be confused with Texture.hx, this is to handle the TEXTUREX lump format
 *</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="hxdoom.lumps.graphic.TextureData" params="" file="src/hxdoom/lumps/graphic/TextureInfo.hx" module="hxdoom.lumps.graphic.TextureInfo"><a>
	<width><x path="Int"/></width>
	<textureName><c path="String"/></textureName>
	<numPatches><x path="Int"/></numPatches>
	<layout><c path="Array"><t path="hxdoom.lumps.graphic.PatchLayout"/></c></layout>
	<height><x path="Int"/></height>
</a></typedef>
	<typedef path="hxdoom.lumps.graphic.PatchLayout" params="" file="src/hxdoom/lumps/graphic/TextureInfo.hx" module="hxdoom.lumps.graphic.TextureInfo"><a>
	<patchIndex><x path="Int"/></patchIndex>
	<offset_y><x path="Int"/></offset_y>
	<offset_x><x path="Int"/></offset_x>
</a></typedef>
	<class path="hxdoom.lumps.map.LineDef" params="" file="src/hxdoom/lumps/map/LineDef.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="LineDef.new" line="16" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.map.LineDef"/>
			</f>
			<meta><m n=":value"><e>LineDef.new</e></m></meta>
		</CONSTRUCTOR>
		<flags public="1"><x path="Int"/></flags>
		<lineType public="1"><x path="Int"/></lineType>
		<sectorTag public="1"><x path="Int"/></sectorTag>
		<frontSideDefID><x path="Int"/></frontSideDefID>
		<backSideDefID><x path="Int"/></backSideDefID>
		<startVertexID><x path="Int"/></startVertexID>
		<endVertexID><x path="Int"/></endVertexID>
		<solid public="1" get="accessor" set="null"><x path="Bool"/></solid>
		<frontSideDef public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.SideDef"/></frontSideDef>
		<backSideDef public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.SideDef"/></backSideDef>
		<start public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.Vertex"/></start>
		<end public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.Vertex"/></end>
		<getTexture public="1" set="method" line="45"><f a="_side">
	<e path="hxdoom.enums.eng.SideType"/>
	<c path="hxdoom.component.Texture"/>
</f></getTexture>
		<get_solid set="method" line="64"><f a=""><x path="Bool"/></f></get_solid>
		<get_frontSideDef set="method" line="70"><f a=""><c path="hxdoom.lumps.map.SideDef"/></f></get_frontSideDef>
		<get_backSideDef set="method" line="75"><f a=""><c path="hxdoom.lumps.map.SideDef"/></f></get_backSideDef>
		<get_start set="method" line="80"><f a=""><c path="hxdoom.lumps.map.Vertex"/></f></get_start>
		<get_end set="method" line="85"><f a=""><c path="hxdoom.lumps.map.Vertex"/></f></get_end>
		<toString public="1" set="method" line="90"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.map.Node" params="" file="src/hxdoom/lumps/map/Node.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="Node.new" line="10" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.map.Node"/>
			</f>
			<meta><m n=":value"><e>Node.new</e></m></meta>
		</CONSTRUCTOR>
		<SUBSECTORIDENTIFIER public="1" expr="0x8000" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8000</e></m></meta>
		</SUBSECTORIDENTIFIER>
		<xPartition public="1"><x path="Int"/></xPartition>
		<yPartition public="1"><x path="Int"/></yPartition>
		<changeXPartition public="1"><x path="Int"/></changeXPartition>
		<changeYPartition public="1"><x path="Int"/></changeYPartition>
		<frontBoxTop public="1"><x path="Int"/></frontBoxTop>
		<frontBoxBottom public="1"><x path="Int"/></frontBoxBottom>
		<frontBoxLeft public="1"><x path="Int"/></frontBoxLeft>
		<frontBoxRight public="1"><x path="Int"/></frontBoxRight>
		<backBoxTop public="1"><x path="Int"/></backBoxTop>
		<backBoxBottom public="1"><x path="Int"/></backBoxBottom>
		<backBoxLeft public="1"><x path="Int"/></backBoxLeft>
		<backBoxRight public="1"><x path="Int"/></backBoxRight>
		<frontChildID public="1"><x path="Int"/></frontChildID>
		<backChildID public="1"><x path="Int"/></backChildID>
		<toString public="1" set="method" line="55"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.map.Sector" params="" file="src/hxdoom/lumps/map/Sector.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="Sector.new" line="10" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.map.Sector"/>
			</f>
			<meta><m n=":value"><e>Sector.new</e></m></meta>
		</CONSTRUCTOR>
		<floorHeight public="1"><x path="Int"/></floorHeight>
		<ceilingHeight public="1"><x path="Int"/></ceilingHeight>
		<floorTexture public="1"><c path="String"/></floorTexture>
		<ceilingTexture public="1"><c path="String"/></ceilingTexture>
		<lightLevel public="1"><x path="Int"/></lightLevel>
		<special public="1"><x path="Int"/></special>
		<tag public="1"><x path="Int"/></tag>
		<toString public="1" set="method" line="32"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="19"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.map.Segment" params="" file="src/hxdoom/lumps/map/Segment.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="Segment.new" line="12" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.map.Segment"/>
			</f>
			<meta><m n=":value"><e>Segment.new</e></m></meta>
		</CONSTRUCTOR>
		<angle public="1"><x path="Int"/></angle>
		<lineID public="1"><x path="Int"/></lineID>
		<side public="1"><x path="Int"/></side>
		<offset public="1"><x path="Int"/></offset>
		<start public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.Vertex"/></start>
		<end public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.Vertex"/></end>
		<sector public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.Sector"/></sector>
		<lineDef public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.LineDef"/></lineDef>
		<get_start set="method" line="34"><f a=""><c path="hxdoom.lumps.map.Vertex"/></f></get_start>
		<get_end set="method" line="39"><f a=""><c path="hxdoom.lumps.map.Vertex"/></f></get_end>
		<get_sector set="method" line="44"><f a=""><c path="hxdoom.lumps.map.Sector"/></f></get_sector>
		<get_lineDef set="method" line="53"><f a=""><c path="hxdoom.lumps.map.LineDef"/></f></get_lineDef>
		<toString public="1" set="method" line="58"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="24"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.map.SideDef" params="" file="src/hxdoom/lumps/map/SideDef.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="SideDef.new" line="11" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.map.SideDef"/>
			</f>
			<meta><m n=":value"><e>SideDef.new</e></m></meta>
		</CONSTRUCTOR>
		<xoffset public="1"><x path="Int"/></xoffset>
		<yoffset public="1"><x path="Int"/></yoffset>
		<upper_texture public="1"><c path="String"/></upper_texture>
		<lower_texture public="1"><c path="String"/></lower_texture>
		<middle_texture public="1"><c path="String"/></middle_texture>
		<sectorID public="1"><x path="Int"/></sectorID>
		<sector public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.Sector"/></sector>
		<get_sector set="method" line="34"><f a=""><c path="hxdoom.lumps.map.Sector"/></f></get_sector>
		<toString public="1" set="method" line="39"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="22"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.map.SubSector" params="" file="src/hxdoom/lumps/map/SubSector.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="SubSector.new" line="11" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.map.SubSector"/>
			</f>
			<meta><m n=":value"><e>SubSector.new</e></m></meta>
		</CONSTRUCTOR>
		<count public="1"><x path="Int"/></count>
		<firstSegID public="1"><x path="Int"/></firstSegID>
		<sector public="1" get="accessor" set="null"><c path="hxdoom.lumps.map.Sector"/></sector>
		<segments public="1" get="accessor" set="null"><c path="Array"><c path="hxdoom.lumps.map.Segment"/></c></segments>
		<get_sector set="method" line="27"><f a=""><c path="hxdoom.lumps.map.Sector"/></f></get_sector>
		<get_segments set="method" line="32"><f a=""><c path="Array"><c path="hxdoom.lumps.map.Segment"/></c></f></get_segments>
		<toString public="1" set="method" line="41"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="19"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxdoom.lumps.map.Vertex" params="" file="src/hxdoom/lumps/map/Vertex.hx">
		<extends path="hxdoom.lumps.LumpBase"/>
		<CONSTRUCTOR public="1" expr="Vertex.new" line="12" static="1">
			<f a="">
				<c path="Array"><x path="Any"/></c>
				<c path="hxdoom.lumps.map.Vertex"/>
			</f>
			<meta><m n=":value"><e>Vertex.new</e></m></meta>
		</CONSTRUCTOR>
		<xpos public="1"><x path="Int"/></xpos>
		<ypos public="1"><x path="Int"/></ypos>
		<toString public="1" set="method" line="23"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="16"><f a="_args">
	<c path="Array"><x path="Any"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* XY position of a linedef
 * ...
 * @author Kaelan</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="hxdoom.typedefs.data.EpisodeProperties" params="" file="src/hxdoom/typedefs/data/EpisodeProperties.hx">
		<a>
			<name>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</name>
			<index>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</index>
			<firstLevel>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</firstLevel>
		</a>
		<haxe_doc>* @author Kaelan</haxe_doc>
	</typedef>
	<typedef path="hxdoom.typedefs.data.MapProperties" params="" file="src/hxdoom/typedefs/data/MapProperties.hx">
		<a>
			<nextMapSecret>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</nextMapSecret>
			<nextMap>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</nextMap>
			<levelName>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</levelName>
			<levelIndex>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</levelIndex>
			<internalName>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</internalName>
			<episodeEnd>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</episodeEnd>
		</a>
		<haxe_doc>* @author Kaelan</haxe_doc>
	</typedef>
	<typedef path="hxdoom.typedefs.graphics.PatchLayout" params="" file="src/hxdoom/typedefs/graphics/PatchLayout.hx">
		<a>
			<patchIndex><x path="Int"/></patchIndex>
			<offset_y><x path="Int"/></offset_y>
			<offset_x><x path="Int"/></offset_x>
		</a>
		<haxe_doc>* @author Kaelan</haxe_doc>
	</typedef>
	<typedef path="hxdoom.typedefs.graphics.TextureData" params="" file="src/hxdoom/typedefs/graphics/TextureData.hx">
		<a>
			<width><x path="Int"/></width>
			<textureName><c path="String"/></textureName>
			<numPatches><x path="Int"/></numPatches>
			<layout><c path="Array"><t path="hxdoom.typedefs.graphics.PatchLayout"/></c></layout>
			<height><x path="Int"/></height>
		</a>
		<haxe_doc>* @author Kaelan</haxe_doc>
	</typedef>
	<abstract path="hxdoom.utils.geom.Angle" params="" file="src/hxdoom/utils/geom/Angle.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="Float"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>* Abstract Haxe float that treats it's value as a 360 degree circle. Going over 360 will overflow back to 0, and going below 0 will underflow back to 360.
 * Treat as Haxe float otherwise.
 * @author Kaelan</haxe_doc>
		<impl><class path="hxdoom.utils.geom._Angle.Angle_Impl_" params="" file="src/hxdoom/utils/geom/Angle.hx" private="1" module="hxdoom.utils.geom.Angle" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="_v">
			<x path="Float"/>
			<x path="hxdoom.utils.geom.Angle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</_new>
	<add public="1" get="inline" set="null" line="14" static="1">
		<f a="this:B">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<addeq public="1" get="inline" set="null" line="18" static="1">
		<f a="this:B">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A += B</e></m>
		</meta>
	</addeq>
	<sub public="1" get="inline" set="null" line="22" static="1">
		<f a="this:B">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<subeq public="1" get="inline" set="null" line="26" static="1">
		<f a="this:B">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A -= B</e></m>
		</meta>
	</subeq>
	<mult public="1" get="inline" set="null" line="30" static="1">
		<f a="this:B">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mult>
	<multeq public="1" get="inline" set="null" line="34" static="1">
		<f a="this:B">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A *= B</e></m>
		</meta>
	</multeq>
	<div public="1" get="inline" set="null" line="38" static="1">
		<f a="this:B">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<diveq public="1" get="inline" set="null" line="42" static="1">
		<f a="this:B">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A /= B</e></m>
		</meta>
	</diveq>
	<preinc public="1" get="inline" set="null" line="46" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preinc>
	<postinc public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postinc>
	<predec public="1" get="inline" set="null" line="54" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>--A</e></m>
		</meta>
	</predec>
	<postdec public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postdec>
	<greaterThanAndEqual public="1" get="inline" set="null" line="62" static="1">
		<f a="this:_b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</greaterThanAndEqual>
	<lessThanAndEqual public="1" get="inline" set="null" line="66" static="1">
		<f a="this:_b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lessThanAndEqual>
	<greaterThan public="1" get="inline" set="null" line="70" static="1">
		<f a="this:_b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</greaterThan>
	<lessThan public="1" get="inline" set="null" line="74" static="1">
		<f a="this:_b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lessThan>
	<asValue public="1" get="inline" set="null" line="81" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns itself as a Float instead of Angle.
	 * @return</haxe_doc>
	</asValue>
	<toRadians public="1" get="inline" set="null" line="88" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns itself as a Float and converts to Radians.
	 * @return</haxe_doc>
	</toRadians>
	<adjust public="1" get="inline" set="null" line="91" static="1">
		<f a="_v">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</adjust>
</class></impl>
	</abstract>
	<class path="hxdoom.utils.geom._Angle.Angle_Impl_" params="" file="src/hxdoom/utils/geom/Angle.hx" private="1" module="hxdoom.utils.geom.Angle" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="_v">
				<x path="Float"/>
				<x path="hxdoom.utils.geom.Angle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</_new>
		<add public="1" get="inline" set="null" line="14" static="1">
			<f a="this:B">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<addeq public="1" get="inline" set="null" line="18" static="1">
			<f a="this:B">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A += B</e></m>
			</meta>
		</addeq>
		<sub public="1" get="inline" set="null" line="22" static="1">
			<f a="this:B">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<subeq public="1" get="inline" set="null" line="26" static="1">
			<f a="this:B">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A -= B</e></m>
			</meta>
		</subeq>
		<mult public="1" get="inline" set="null" line="30" static="1">
			<f a="this:B">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mult>
		<multeq public="1" get="inline" set="null" line="34" static="1">
			<f a="this:B">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A *= B</e></m>
			</meta>
		</multeq>
		<div public="1" get="inline" set="null" line="38" static="1">
			<f a="this:B">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<diveq public="1" get="inline" set="null" line="42" static="1">
			<f a="this:B">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A /= B</e></m>
			</meta>
		</diveq>
		<preinc public="1" get="inline" set="null" line="46" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preinc>
		<postinc public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postinc>
		<predec public="1" get="inline" set="null" line="54" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>--A</e></m>
			</meta>
		</predec>
		<postdec public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postdec>
		<greaterThanAndEqual public="1" get="inline" set="null" line="62" static="1">
			<f a="this:_b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</greaterThanAndEqual>
		<lessThanAndEqual public="1" get="inline" set="null" line="66" static="1">
			<f a="this:_b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lessThanAndEqual>
		<greaterThan public="1" get="inline" set="null" line="70" static="1">
			<f a="this:_b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</greaterThan>
		<lessThan public="1" get="inline" set="null" line="74" static="1">
			<f a="this:_b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lessThan>
		<asValue public="1" get="inline" set="null" line="81" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns itself as a Float instead of Angle.
	 * @return</haxe_doc>
		</asValue>
		<toRadians public="1" get="inline" set="null" line="88" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns itself as a Float and converts to Radians.
	 * @return</haxe_doc>
		</toRadians>
		<adjust public="1" get="inline" set="null" line="91" static="1">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</adjust>
	</class>
</haxe>